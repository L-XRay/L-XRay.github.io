<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTTP缓存技术</title>
      <link href="/posts/bc30dac7.html"/>
      <url>/posts/bc30dac7.html</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP缓存技术"><a href="#HTTP缓存技术" class="headerlink" title="HTTP缓存技术"></a>HTTP缓存技术</h3><p>对于一些具有重复性的 HTTP 请求，比如每次请求得到的数据都一样的，我们可以把这对「请求-响应」的数据都<strong>缓存在本地</strong>，那么下次就直接读取本地的数据，不必再通过网络获取服务器的响应了。</p><p>HTTP 缓存有两种实现方式，分别是<strong>强制缓存和协商缓存</strong>。</p><h4 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h4><p>强制缓存指的是只要浏览器判断缓存没有过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在于浏览器这边。</p><p>强缓存是利用下面这两个 HTTP 响应头部（Response Header）字段实现的，它们都用来表示资源在客户端缓存的有效期：</p><ul><li><code>Cache-Control</code>， 是一个相对时间，比如30分钟，或者一个小时。</li><li><code>Expires</code>，是一个绝对时间，是一个具体的时间点，比如2022年6月25日10:00。</li></ul><p>如果 HTTP 响应头部同时有 Cache-Control 和 Expires 字段的话，<strong>Cache-Control的优先级高于 Expires</strong> 。</p><p>建议使用Cache-Control 来实现强缓存。具体的实现流程如下：</p><ol><li>浏览器第一次请求访问服务器资源时，服务器会在返回资源的同时，在响应头加上 <strong>Cache-Control</strong>，并设置过期时间</li><li>浏览器再次请求该资源时，会<strong>先通过当前请求资源的时间与 Cache-Control中的过期时间判断缓存是否过期</strong>，若缓存没有过期，则使用该缓存，否则再次请求服务器获取资源</li><li>服务器收到请求后，返回资源，并更新  <strong>Cache-Control</strong> 的过期时间</li></ol><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>当我们在浏览器使用开发者工具的时候，你可能会看到过某些请求的响应码是 <code>304</code>，这个是告诉浏览器可以使用本地缓存的资源，通常这种通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存。</p><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/2-2.png" alt="2-2"></p><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/2-3.png" alt="2-3"></p><p><strong>协商缓存就是与服务端协商之后，通过协商结果来判断是否使用本地缓存</strong>。</p><p>协商缓存可以基于两种头部来实现。</p><ol><li><p><strong>请求头</strong>中的 <code>If-Modified-Since</code> 字段与<strong>响应头</strong>中的 <code>Last-Modified</code> 字段</p><ul><li>响应头中的 <code>Last-Modified</code>：标示这个响应资源的最后修改时间</li><li>请求头中的 <code>If-Modified-Since</code> ：当资源过期了，发现响应头中具有 <code>Last-Modified</code>  声明，则再次发起请求的时候并带上 <code>Last-Modified</code>   的时间，服务器收到请求后发现有  <code>If-Modified-Since</code> 则与被请求资源的最后修改时间进行对比（ <code>Last-Modified</code>  ），如果(服务端)最后修改时间较新(大)，说明资源被改过，则返回最新资源，HTTP 200 OK；如果(服务端)最后修改时间较旧(小)，说明资源无新修改，响应 HTTP 304 走缓存。</li></ul><p><del>ps：感觉最后修改时间较新或较旧并不能判断资源是否更新，需要确定时间被修改了，才能判断是否走缓存？</del></p></li><li><p><strong>请求头</strong>中的 <code>If-None-Match</code> 字段与<strong>响应头</strong>中的 <code>ETag</code> 字段</p><ul><li>响应头部中 <code>Etag</code>：唯一标识响应资源</li><li>请求头中的 <code>If-None-Match</code>：当资源过期时，浏览器发现响应头里有 Etag，则再次向服务器发起请求时，会将请求头<code>If-None-Match</code> 值设置为 Etag 的值。服务器收到请求后进行比对，如果资源没有变化返回 304，如果资源变化了返回 200。</li></ul></li></ol><blockquote><p>第一种实现方式是基于时间实现的，第二种实现方式是基于一个唯一标识实现的，相对来说后者可以更加准确地判断文件内容是否被修改，避免由于时间篡改导致的不可靠问题。</p></blockquote><p>如果在第一次请求资源的时候，服务端返回的 HTTP 响应头部同时有 Etag 和 Last-Modified 字段，那么客户端再下一次请求的时候，如果带上了 ETag 和 Last-Modified 字段信息给服务端，<strong>这时 Etag 的优先级更高</strong>，也就是服务端先会判断 Etag 是否变化了，如果 Etag 有变化就不用在判断 Last-Modified 了，如果 Etag 没有变化，然后再看 Last-Modified。</p><p><strong>为什么 ETag 的优先级更高？</strong></p><ol><li>在没有修改文件内容情况下文件的最后修改时间可能也会改变，这会导致客户端认为这文件被改动了，从而重新请求</li><li>可能有些文件是在秒级以内修改的，<code>If-Modified-Since</code> 能检查到的粒度是秒级的，使用 Etag就能够保证这种需求下客户端在 1 秒内能刷新多次</li><li>有些服务器不能精确获取文件的最后修改时间</li></ol><p>Tips：<strong>协商缓存这两个字段都需要配合强制缓存中 Cache-control 字段来使用，只有在未能命中强制缓存的时候，才能发起带有协商缓存字段的请求</strong>。</p><h4 id="强制缓存和协商缓存的工作流程"><a href="#强制缓存和协商缓存的工作流程" class="headerlink" title="强制缓存和协商缓存的工作流程"></a>强制缓存和协商缓存的工作流程</h4><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/HTTP.drawio.png" alt="HTTP.drawio"></p><p>当使用 ETag 字段实现的协商缓存的过程：</p><ul><li><p>当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在 Response 头部加上 ETag 唯一标识，这个唯一标识的值是根据当前请求的资源生成的；</p></li><li><p>当浏览器再次请求访问服务器中的该资源时，首先会先检查强制缓存是否过期：</p><ul><li>如果没有过期，则直接使用本地缓存；</li><li>如果缓存过期了，会在 Request 头部加上 If-None-Match 字段，该字段的值就是 ETag 唯一标识；</li></ul></li><li><p>服务器再次收到请求后，会根据请求中的 If-None-Match 值与当前请求的资源生成的唯一标识进行比较</p><ul><li><strong>如果值相等，则返回 304 Not Modified，不会返回资源</strong>；</li><li>如果不相等，则返回 200 状态码和返回资源，并在 Response 头部加上新的 ETag 唯一标识；</li></ul></li><li><p>如果浏览器收到 304 的请求响应状态码，则会从本地缓存中加载资源，否则更新资源。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 我的学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> HTTP常见面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GET和POST</title>
      <link href="/posts/e2fef295.html"/>
      <url>/posts/e2fef295.html</url>
      
        <content type="html"><![CDATA[<h3 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h3><h4 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h4><ul><li><p>根据 RFC 规范，<strong>GET 的语义是从服务器获取指定的资源</strong>，GET 方法是安全、幂等、可被缓存的。</p></li><li><p>根据 RFC 规范，<strong>POST 的语义是根据请求负荷（报文body）对指定的资源做出处理</strong>，POST 不安全，不幂等，（大部分实现）不可缓存。</p></li></ul><h4 id="GET和POST方法都是安全和幂等的吗？"><a href="#GET和POST方法都是安全和幂等的吗？" class="headerlink" title="GET和POST方法都是安全和幂等的吗？"></a>GET和POST方法都是安全和幂等的吗？</h4><p>在 HTTP 协议里，所谓的<strong>「安全」</strong>是指请求方法不会「破坏」服务器上的资源。</p><p>所谓的<strong>「幂等」</strong>，意思是多次执行相同的操作，结果都是「相同」的</p><ul><li><strong>GET 方法就是安全且幂等的</strong>，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。所以，<strong>可以对 GET 请求的数据做缓存，这个缓存可以做到浏览器本身上（彻底避免浏览器发请求），也可以做到代理上（如nginx），而且在浏览器中 GET 请求可以保存为书签</strong>。</li><li><strong>POST</strong> 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是<strong>不安全</strong>的，且多次提交数据就会创建多个资源，所以<strong>不是幂等</strong>的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 我的学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> HTTP常见面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP基本概念</title>
      <link href="/posts/3f4e513f.html"/>
      <url>/posts/3f4e513f.html</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP基本概念"><a href="#HTTP基本概念" class="headerlink" title="HTTP基本概念"></a>HTTP基本概念</h3><h4 id="HTTP是什么？"><a href="#HTTP是什么？" class="headerlink" title="HTTP是什么？"></a>HTTP是什么？</h4><p>HTTP 是超文本传输协议，也就是<strong>*H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol*。</p><ul><li><p><strong>协议</strong></p><p>使用计算机能够理解的语言确立一种计算机之间交流通信的规范，约定和规范了相关的各种控制和错误处理方式</p></li><li><p><strong>传输</strong></p><p>专门用来在<strong>两点之间传输数据</strong>的约定和规范。</p></li><li><p><strong>超文本</strong></p><p>文字、图片、视频等的混合体，最关键有超链接，能从一个超文本跳转到另外一个超文本。</p></li></ul><p><strong>HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。</strong></p><p><strong>Tips：</strong></p><ol><li>HTTP 是基于 TCP 传输协议进行通信</li></ol><hr><h4 id="HTTP常见的状态码"><a href="#HTTP常见的状态码" class="headerlink" title="HTTP常见的状态码"></a>HTTP常见的状态码</h4><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/2-1.png" alt="2-1"></p><hr><h4 id="HTTP常见的字段"><a href="#HTTP常见的字段" class="headerlink" title="HTTP常见的字段"></a>HTTP常见的字段</h4><ul><li><p><strong>Host</strong></p><ol><li>客户端发送请求时，用来指定服务器的域名</li><li>有了Host字段，就可以将请求发往同一台服务器的不同网站</li></ol></li><li><p><strong>Content-Length</strong></p><ol><li>服务器返回数据时，表明当前回应的数据长度（字节）</li><li><strong>HTTP 协议通过设置回车符、换行符作为 HTTP header 的边界，通过 Content-Length 字段作为 HTTP body 的边界，这两个方式都是为了解决TCP“粘包”的问题</strong></li></ol></li><li><p><strong>Connection</strong></p><ol><li>常用于客户端要求服务器使用「 HTTP 长连接」机制，以便其他请求复用。</li><li>HTTP 长连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。</li><li>开启了 HTTP Keep-Alive 机制后， 连接就不会中断，而是保持连接。当客户端发送另一个请求时，它会使用同一个连接，一直持续到客户端或服务器端提出断开连接。</li></ol><p><strong>Tips：</strong></p><ol><li><p><strong>HTTP</strong> 的 Keep-Alive 也叫 HTTP 长连接，该功能是由<strong>「应用程序」</strong>实现的，可以使得用同一个 TCP 连接来发送和接收多个 HTTP 请求/应答，减少了 HTTP 短连接带来的多次 TCP 连接建立和释放的开销。</p></li><li><p><strong>TCP</strong> 的 Keepalive 也叫 TCP 保活机制，该功能是由<strong>「内核」</strong>实现的，当客户端和服务端长达一定时间没有进行数据交互时，内核为了确保该连接是否还有效，就会发送探测报文，来检测对方是否还在线，然后来决定是否要关闭该连接。</p></li></ol></li><li><p><strong>Content-Type</strong></p><ol><li>用于服务器回应时，告诉客户端，本次数据的格式。</li><li>客户端请求的时候，可以使用 <code>Accept</code> 字段声明自己可以接受哪些数据格式。</li></ol></li><li><p><strong>Content-Encoding</strong></p><ol><li>说明数据的压缩方法。表示服务器返回的数据使用了什么压缩格式。</li><li>客户端在请求时，用 <code>Accept-Encoding</code> 字段说明自己可以接受哪些压缩数据。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 我的学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> HTTP常见面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/posts/e85d694a.html"/>
      <url>/posts/e85d694a.html</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树深度优先遍历-前中后序遍历"><a href="#二叉树深度优先遍历-前中后序遍历" class="headerlink" title="二叉树深度优先遍历(前中后序遍历)"></a>二叉树深度优先遍历(前中后序遍历)</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 前序:中左右</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode cur,List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        traversal(cur.left,res);</span><br><span class="line">        traversal(cur.right,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序:左中右</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode cur,List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(cur.left,res);</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        traversal(cur.right,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序:左右中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        traversal(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode cur,List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(cur.left,res);</span><br><span class="line">        traversal(cur.right,res);</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86I.jpg" alt="二叉树迭代遍历I" style="width:50%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 前序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            res.add(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            res.add(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 翻转</span></span><br><span class="line">        Collections.reverse(res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = stack.pop();</span><br><span class="line">                res.add(cur.val);</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统一迭代"><a href="#统一迭代" class="headerlink" title="统一迭代"></a>统一迭代</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%9F%E4%B8%80%E8%BF%AD%E4%BB%A3.jpg" alt="二叉树统一迭代" style="width:50%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序:中左右=&gt;右左中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    stack.push(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    stack.push(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(node);</span><br><span class="line">                stack.push(<span class="literal">null</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                node = stack.peek();</span><br><span class="line">                stack.pop();</span><br><span class="line">                res.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序:左中右=&gt;右中左</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="keyword">if</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(cur.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    stack.push(cur.right);</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                stack.push(<span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">if</span>(cur.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    stack.push(cur.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                cur = stack.peek();</span><br><span class="line">                stack.pop();</span><br><span class="line">                res.add(cur.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序:左右中=&gt;中右左</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="keyword">if</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                stack.push(<span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">if</span>(cur.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    stack.push(cur.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    stack.push(cur.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                cur = stack.peek();</span><br><span class="line">                stack.pop();</span><br><span class="line">                res.add(cur.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树广度优先遍历-层序遍历"><a href="#二叉树广度优先遍历-层序遍历" class="headerlink" title="二叉树广度优先遍历(层序遍历)"></a>二叉树广度优先遍历(层序遍历)</h2><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.jpg" alt="二叉树层序遍历" style="width:50%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            List&lt;Integer&gt; item = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                item.add(node.val);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h2><p><a href="https://leetcode.cn/problems/symmetric-tree/submissions/">leetcode题目链接</a></p><p>给定一个二叉树，检查它是否是轴对称的。</p><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A4%BA%E4%BE%8B.png" alt="对称二叉树示例" style="zoom:50%;" /></p><h3 id="思路草稿"><a href="#思路草稿" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%80%92%E5%BD%92.jpg" alt="对称二叉树-递归" style="width:50%;" /></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compare(root.left,root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(TreeNode left,TreeNode right)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span>&amp;&amp;right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(left!=<span class="literal">null</span>&amp;&amp;right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(left==<span class="literal">null</span>&amp;&amp;right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(left.val!=right.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">outside</span> <span class="operator">=</span> compare(left.left,right.right);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">inside</span> <span class="operator">=</span> compare(left.right,right.left);</span><br><span class="line">            <span class="keyword">return</span> outside&amp;&amp;inside;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全二叉树的节点个数"><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数"></a>完全二叉树的节点个数</h2><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">leetcode题目链接</a></p><p>给出一个完全二叉树，求出该树的节点个数。</p><p>提示：</p><ul><li>树中节点的数目范围是[0, 5 * 10^4]</li><li>0 &lt;= Node.val &lt;= 5 * 10^4</li><li>题目数据保证输入的树是 完全二叉树</li></ul><h3 id="思路草稿-1"><a href="#思路草稿-1" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.jpg" alt="完全二叉树节点个数" style="width:50%;" /></p><p>ps：也可以使用普通二叉树遍历计数的方式</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> root.left;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> root.right;</span><br><span class="line">        <span class="type">int</span> leftDepth=<span class="number">0</span>,rightDepth=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            left = left.left;</span><br><span class="line">            leftDepth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            right = right.right;</span><br><span class="line">            rightDepth++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左右深度相等，直接利用公式返回满二叉树节点数</span></span><br><span class="line">        <span class="keyword">if</span>(leftDepth==rightDepth)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">2</span>&lt;&lt;leftDepth)-<span class="number">1</span>;  <span class="comment">// 2^n-1 左移一位相当于*(2^1) 所以leftDepth初值为0 2*1-1 </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不等则遍历至叶子结点，向上返回节点数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftCount</span> <span class="operator">=</span> countNodes(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightCount</span> <span class="operator">=</span> countNodes(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> leftCount+rightCount+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p><a href="https://leetcode.cn/problems/balanced-binary-tree/">leetcode题目链接</a></p><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1 。</p></blockquote><h3 id="思路草稿-2"><a href="#思路草稿-2" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91-%E9%80%92%E5%BD%92.jpg" alt="平衡二叉树-递归" style="width:50%;" /></p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getHeight(root)!=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(TreeNode cur)</span> &#123;</span><br><span class="line">        <span class="comment">// 空节点，高度假设为0</span></span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左子树高度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> getHeight(cur.left);</span><br><span class="line">        <span class="keyword">if</span>(leftHeight==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右子树高度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> getHeight(cur.right);</span><br><span class="line">        <span class="keyword">if</span>(rightHeight==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左右子树高度差大于1，用-1表示高度不平衡</span></span><br><span class="line">        <span class="keyword">if</span>(Math.abs(leftHeight-rightHeight)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 因为空节点高度为0，这里返回最大高度时需要+1,表示取上一层高度</span></span><br><span class="line">            <span class="keyword">return</span> Math.max(leftHeight,rightHeight)+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的所有路径"><a href="#二叉树的所有路径" class="headerlink" title="二叉树的所有路径"></a>二叉树的所有路径</h2><p><a href="https://leetcode.cn/problems/binary-tree-paths/submissions/">leetcode题目链接</a></p><p>给你一个二叉树的根节点 <code>root</code> ，按 <strong>任意顺序</strong> ，返回所有从根节点到叶子节点的路径。</p><p><strong>叶子节点</strong> 是指没有子节点的节点。</p><h3 id="思路草稿-3"><a href="#思路草稿-3" class="headerlink" title="思路草稿"></a>思路草稿</h3><h4 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h4><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84-%E9%80%92%E5%BD%92.jpg" alt="二叉树的所有路径-递归" style="width:50%;" /></p><h4 id="迭代-1"><a href="#迭代-1" class="headerlink" title="迭代"></a>迭代</h4><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84-%E8%BF%AD%E4%BB%A3.jpg" alt="二叉树的所有路径-迭代" style="width:50%;" /></p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><h4 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        getPaths(root,paths,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getPaths</span><span class="params">(TreeNode cur,List&lt;Integer&gt; paths,List&lt;String&gt; res)</span> &#123;</span><br><span class="line">        paths.add(cur.val);  <span class="comment">// 中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur.left==<span class="literal">null</span>&amp;&amp;cur.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;paths.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                sb.append(paths.get(i)).append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(paths.get(paths.size()-<span class="number">1</span>));</span><br><span class="line">            res.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur.left!=<span class="literal">null</span>)&#123;    <span class="comment">// 左</span></span><br><span class="line">            getPaths(cur.left,paths,res);</span><br><span class="line">            paths.remove(paths.size()-<span class="number">1</span>); <span class="comment">// 回溯,回退到当前节点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            getPaths(cur.right,paths,res);</span><br><span class="line">            paths.remove(paths.size()-<span class="number">1</span>); <span class="comment">// 回溯,回退到当前节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代-2"><a href="#迭代-2" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Object&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 根节点以及路径入栈，栈初始化</span></span><br><span class="line">        stack.push(root);</span><br><span class="line">        stack.push(root.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="comment">// 节点以及路径出栈</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> (String) stack.pop();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> (TreeNode) stack.pop();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 叶子节点</span></span><br><span class="line">            <span class="keyword">if</span>(node.left==<span class="literal">null</span>&amp;&amp;node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">                res.add(path);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 右</span></span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">                stack.push(path+<span class="string">&quot;-&gt;&quot;</span>+node.right.val);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 左</span></span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">                stack.push(path+<span class="string">&quot;-&gt;&quot;</span>+node.left.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap源码(下)</title>
      <link href="/posts/3a46cac9.html"/>
      <url>/posts/3a46cac9.html</url>
      
        <content type="html"><![CDATA[<h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><h2 id="插入流程"><a href="#插入流程" class="headerlink" title="插入流程"></a>插入流程</h2><p>JDK1.8 HashMap put方法源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 初始化桶数组 table，table 被延迟到插入新数据时再进行初始化</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果桶中不包含键值对节点引用，则将新键值对节点的引用存入桶中即可</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 如果键的值以及节点 hash 等于链表中的第一个键值对节点时，则将 e 指向该键值对</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 如果桶中的引用类型为 TreeNode，则调用红黑树的插入方法</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">              </span><br><span class="line">              <span class="comment">// 对链表进行遍历，并统计链表长度</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                  </span><br><span class="line">                  <span class="comment">// 链表中不包含要插入的键值对节点时，则将该节点接在链表的最后</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                      </span><br><span class="line">                      <span class="comment">// 如果链表长度大于或等于树化阈值，则进行树化操作</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                  </span><br><span class="line">                  <span class="comment">// 条件为 true，表示当前链表包含要插入的键值对，终止遍历</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 判断要插入的键值对是否存在 HashMap 中</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">              </span><br><span class="line">              <span class="comment">// onlyIfAbsent 表示是否仅在 oldValue 为 null 的情况下更新键值对的值</span></span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 键值对数量超过阈值时，则进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li><p>首先进行哈希值的扰动，获取一个新的哈希值。(key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</p></li><li><p>判断 tab 是否为空或者长度为 0，如果是则进行扩容操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">n = (tab = resize()).length;</span><br></pre></td></tr></table></figure></li><li><p>根据哈希值计算下标，如果对应下标正好没有存放数据，则直接插入即可，否则需要覆盖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tab[i = (n - <span class="number">1</span>) &amp; hash])</span><br></pre></td></tr></table></figure></li><li><p>判断 tab[i]是否为树节点，是则向树中插入节点，否则向链表中插入数据。</p></li><li><p>如果链表中插入节点的时候，链表长度大于等于 8，则需要把链表转换为红黑树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">treeifyBin(tab, hash);</span><br></pre></td></tr></table></figure></li><li><p>最后所有元素处理完成后，判断是否超过阈值；threshold，超过则扩容。</p></li><li><p><strong>treeifyBin</strong>,是一个链表转树的方法，但不是所有的链表长度为 8 后都会转成树，还需要判断存放 key 值的数组桶长度是否小于 64 <strong>（MIN_TREEIFY_CAPACITY）</strong>。如果小于则需要扩容，扩容后链表上的数据会被拆分散列的相应的桶节点上，也就把链表长度缩短了。</p></li></ol><h2 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h2><p>HashMap 是基于数组+链表和红黑树实现的，但用于存放 key 值得的数组桶的长度是固定的，由初始化决定。</p><p>那么，随着数据的插入数量增加以及负载因子的作用下，就需要扩容来存放更多的数据。</p><p>JDK1.8 HashMap resize()方法源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Cap 是 capacity 的缩写，容量。如果容量不为空，则说明已经初始化。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果容量达到最大 1 &lt;&lt; 30 则不再扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 按旧容量和阀值的 2 倍计算新容量和阀值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 初始化时，将 threshold 的值赋值给 newCap，</span></span><br><span class="line"><span class="comment">// HashMap 使用 threshold 变量暂时保存 initialCapacity 参数的值</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 调用无参构造方法时，数组桶数组容量为默认容量 1 &lt;&lt; 4; aka 16</span></span><br><span class="line"><span class="comment">// 阀值；是默认容量与负载因子的乘积，0.75</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// newThr 为 0，则使用阀值公式计算容量</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">  <span class="comment">// 初始化数组桶，用于存放 key</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果旧数组桶，oldCap 有值，则遍历将键值映射到新数组桶中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                  </span><br><span class="line">                  <span class="comment">// 这里 split，是红黑树拆分操作。在重新映射时操作的</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                  <span class="comment">// 这里是链表，如果当前是按照链表存放的，则将链表节点按原顺序进行分组</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                  </span><br><span class="line">                  <span class="comment">// 将分组后的链表映射到桶中</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>扩容时计算出新的 newCap、newThr，这是两个单词的缩写，一个是容量 Capacity ，另一个是阀值 Threshold</li><li>newCap 用于创新的数组桶 <strong>new Node[newCap]</strong>;</li><li>随着扩容后，原来那些因为哈希碰撞，存放成链表和红黑树的元素，都需要进行拆分存放到新的位置中。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 我的学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈与队列</title>
      <link href="/posts/6534ce06.html"/>
      <url>/posts/6534ce06.html</url>
      
        <content type="html"><![CDATA[<h2 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232.用栈实现队列"></a>232.用栈实现队列</h2><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">leetcode题目链接</a></p><p>使用栈实现队列的下列操作：</p><ul><li>push(x) — 将一个元素放入队列的尾部。</li><li>pop() — 从队列首部移除元素。</li><li>peek() — 返回队列首部的元素。</li><li>empty() — 返回队列是否为空。</li></ul><h3 id="思路草稿"><a href="#思路草稿" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.jpg" alt="用栈实现队列" style="width:50%;" /></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stackIn;</span><br><span class="line">    Stack&lt;Integer&gt; stackOut;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stackIn.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpStackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpStackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(stackIn.isEmpty()&amp;&amp;stackOut.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dumpStackIn</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!stackOut.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stackIn.isEmpty())&#123;</span><br><span class="line">            stackOut.push(stackIn.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225.用队列实现栈"></a>225.用队列实现栈</h2><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/">leetcode题目链接</a></p><p>使用队列实现栈的下列操作：</p><ul><li>push(x) — 元素 x 入栈</li><li>pop() — 移除栈顶元素</li><li>top() — 获取栈顶元素</li><li>empty() — 返回栈是否为空</li></ul><h3 id="思路草稿-1"><a href="#思路草稿-1" class="headerlink" title="思路草稿"></a>思路草稿</h3><p>一个队列</p><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88I.jpg" alt="用队列实现栈I" style="width:50%;" /></p><p>两个队列</p><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88II.jpg" alt="用队列实现栈II" style="width:50%;" /></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>一个队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        queue.offer(x);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            queue.offer(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 栈顶即队头</span></span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>两个队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    Queue&lt;Integer&gt; queue1; <span class="comment">// 栈顶元素</span></span><br><span class="line">    Queue&lt;Integer&gt; queue2; <span class="comment">// 栈元素顺序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        queue2.offer(x);</span><br><span class="line">        <span class="keyword">while</span>(!queue1.isEmpty())&#123;</span><br><span class="line">            queue2.offer(queue1.poll());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Queue&lt;Integer&gt; temp;</span><br><span class="line">        temp = queue1;</span><br><span class="line">        queue1 = queue2;</span><br><span class="line">        queue2 = temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue1.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 栈顶即队头</span></span><br><span class="line">        <span class="keyword">return</span> queue1.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h2><p><a href="https://leetcode.cn/problems/valid-parentheses/">leetcode题目链接</a></p><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>注意空字符串可被认为是有效字符串。</li></ul><h3 id="思路草稿-2"><a href="#思路草稿-2" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.jpg" alt="有效的括号" style="width:50%;" /></p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(stack.isEmpty() || stack.peek()!=ch)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a>1047. 删除字符串中的所有相邻重复项</h2><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">leetcode题目链接</a></p><p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</p><p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p><p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><p>示例：</p><ul><li>输入：”abbaca”</li><li>输出：”ca”</li><li>解释：例如，在 “abbaca” 中，我们可以删除 “bb” 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 “aaca”，其中又只有 “aa” 可以执行重复项删除操作，所以最后的字符串为 “ca”。</li></ul><h3 id="思路草稿-3"><a href="#思路草稿-3" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.jpg" alt="删除字符串中的所有相邻重复项" style="width:50%;" /></p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty() || stack.peek()!=ch)&#123;</span><br><span class="line">                stack.push(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            res = stack.pop()+res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a>150. 逆波兰表达式求值</h2><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">leetcode题目链接</a></p><p>根据 逆波兰表示法，求表达式的值。</p><p>有效的运算符包括 + , - , * , / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p>说明：</p><p>整数除法只保留整数部分。 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</p><h3 id="思路草稿-4"><a href="#思路草稿-4" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.jpg" alt="逆波兰表达式求值" style="width:50%;" /></p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String token : tokens)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;+&quot;</span>.equals(token))&#123;</span><br><span class="line">                stack.push(stack.pop()+stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;-&quot;</span>.equals(token))&#123; <span class="comment">// 先出栈的是减数</span></span><br><span class="line">                stack.push(-stack.pop()+stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;*&quot;</span>.equals(token))&#123;</span><br><span class="line">                stack.push(stack.pop()*stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/&quot;</span>.equals(token))&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp1</span> <span class="operator">=</span> stack.pop(); <span class="comment">// 除数</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp2</span> <span class="operator">=</span> stack.pop(); <span class="comment">// 被除数</span></span><br><span class="line">                stack.push(temp2/temp1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 数字入栈</span></span><br><span class="line">                stack.push(Integer.valueOf(token));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后剩下的元素即是运算结果</span></span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a>239. 滑动窗口最大值</h2><p><a href="https://leetcode.cn/problems/sliding-window-maximum/">leetcode题目链接</a></p><p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p>返回滑动窗口中的最大值。</p><h3 id="思路草稿-5"><a href="#思路草稿-5" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.jpg" alt="滑动窗口最大值" style="width: 50%;" /></p><p>主要思想是<strong>队列没有必要维护窗口里的所有元素，只需要维护有可能成为窗口里最大值的元素就可以了，同时保证队列里的元素数值是由大到小的。</strong></p><p>那么这个维护元素单调递减的队列就叫做<strong>单调队列，即单调递减或单调递增的队列。</strong></p><p>设计单调队列的时候，pop和push操作要保持如下规则：</p><ol><li>pop(value)：如果窗口移除的元素value等于单调队列的出口元素，那么队列弹出元素，否则不用任何操作</li><li>push(value)：如果push的元素value大于入口元素的数值，那么就将队列入口的元素弹出，直到push元素的数值小于等于队列入口元素的数值为止</li></ol><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDequeue</span> &#123;</span><br><span class="line">    Deque&lt;Integer&gt; dequeue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!dequeue.isEmpty()&amp;&amp;dequeue.peek()==val)&#123;</span><br><span class="line">            dequeue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!dequeue.isEmpty()&amp;&amp;val&gt;dequeue.getLast())&#123;</span><br><span class="line">            dequeue.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">        dequeue.add(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">maxVal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dequeue.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length - k + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">MyDequeue</span> <span class="variable">myDequeue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDequeue</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            myDequeue.push(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res[count++] = myDequeue.maxVal();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i&lt;nums.length;i++)&#123;</span><br><span class="line">            myDequeue.pop(nums[i-k]);</span><br><span class="line">            myDequeue.push(nums[i]);</span><br><span class="line">            res[count++] = myDequeue.maxVal();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347.前 K 个高频元素"></a>347.前 K 个高频元素</h2><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/">leetcode题目链接</a></p><p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p><p>示例 1:</p><ul><li>输入: nums = [1,1,1,2,2,3], k = 2</li><li>输出: [1,2]</li></ul><p>示例 2:</p><ul><li>输入: nums = [1], k = 1</li><li>输出: [1]</li></ul><h3 id="思路草稿-6"><a href="#思路草稿-6" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.jpg" alt="前K个高频元素" style="width:50%;" /></p><p>优先级队列<strong>就是一个披着队列外衣的堆</strong>，因为优先级队列对外接口只是从队头取元素，从队尾添加元素，再无其他取元素的方式，看起来就是一个队列，且内部元素是自动<strong>依照元素的权值排列</strong>。</p><p><strong>堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。</strong> 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Comparator接口说明:</span></span><br><span class="line"><span class="comment"> * 返回负数，形参中第一个参数排在前面；返回正数，形参中第二个参数排在前面</span></span><br><span class="line"><span class="comment"> * 对于队列：排在前面意味着往队头靠</span></span><br><span class="line"><span class="comment"> * 对于堆（使用PriorityQueue实现）：从队头到队尾按从小到大排就是最小堆（小顶堆），</span></span><br><span class="line"><span class="comment"> *                                从队头到队尾按从大到小排就是最大堆（大顶堆）---&gt;队头元素相当于堆的根节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//解法1：基于大顶堆实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent1(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//key为数组元素值,val为对应出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在优先队列中存储二元组(num,cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">        <span class="comment">//出现次数按从队头到队尾的顺序是从大到小排,出现次数最多的在队头(相当于大顶堆)</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1, pair2)-&gt;pair2[<span class="number">1</span>]-pair1[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;<span class="comment">//大顶堆需要对所有元素进行排序</span></span><br><span class="line">            pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;<span class="comment">//依次从队头弹出k个,就是出现频率前k高的元素</span></span><br><span class="line">            ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解法2：基于小顶堆实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent2(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//key为数组元素值,val为对应出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在优先队列中存储二元组(num,cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">        <span class="comment">//出现次数按从队头到队尾的顺序是从小到大排,出现次数最低的在队头(相当于小顶堆)</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1,pair2)-&gt;pair1[<span class="number">1</span>]-pair2[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;<span class="comment">//小顶堆只需要维持k个元素有序</span></span><br><span class="line">            <span class="keyword">if</span>(pq.size()&lt;k)&#123;<span class="comment">//小顶堆元素个数小于k个时直接加</span></span><br><span class="line">                pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(entry.getValue()&gt;pq.peek()[<span class="number">1</span>])&#123;<span class="comment">//当前元素出现次数大于小顶堆的根结点(这k个元素中出现次数最少的那个)</span></span><br><span class="line">                    pq.poll();<span class="comment">//弹出队头(小顶堆的根结点),即把堆里出现次数最少的那个删除,留下的就是出现次数多的了</span></span><br><span class="line">                    pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//依次弹出小顶堆,先弹出的是堆的根,出现次数少,后面弹出的出现次数多</span></span><br><span class="line">            ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>双指针</title>
      <link href="/posts/91a7e4d1.html"/>
      <url>/posts/91a7e4d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h2><p><a href="https://leetcode.cn/problems/reverse-linked-list/">leetcode题目链接</a></p><p>题意：反转一个单链表。</p><p>示例: 输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL 输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p><h3 id="思路草稿"><a href="#思路草稿" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.jpg" alt="反转链表" style="width: 50%;" /></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(current!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> current.next;</span><br><span class="line">            current.next = pre;</span><br><span class="line">            pre = current;</span><br><span class="line">            current = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h2><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">leetcode题目链接</a></p><p>题意：给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p>示例 1：</p><p>输入：head = [1,2,3,4,5], n = 2 输出：[1,2,3,5] </p><p>示例 2：</p><p>输入：head = [1], n = 1 输出：[] </p><p>示例 3：</p><p>输入：head = [1,2], n = 1 输出：[1]</p><h3 id="思路草稿-1"><a href="#思路草稿-1" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0n%E8%8A%82%E7%82%B9.jpg" style="width:50%;" /></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">visual</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        visual.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span>  <span class="operator">=</span> visual, fast = visual;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> visual.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">leetcode题目链接</a></p><p>题意： 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p><strong>说明</strong>：不允许修改给定的链表。</p><h3 id="思路草稿-2"><a href="#思路草稿-2" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.jpg" alt="环形链表II" style="width:50%;" /></p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fast == slow)&#123; <span class="comment">// 相遇，有环</span></span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> slow;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(index1!=index2)&#123;  <span class="comment">// 相遇点到入口处与起始点到入口处距离相等</span></span><br><span class="line">                    index1 = index1.next;</span><br><span class="line">                    index2 = index2.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> index1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15.三数之和"></a>15.三数之和</h2><p><a href="https://leetcode.cn/problems/3sum/">leetcode题目链接</a></p><p>题意：给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p><p><strong>注意：</strong> 答案中不可以包含重复的三元组。</p><p>示例：</p><p>给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p><p>满足要求的三元组集合为： [ [-1, 0, 1], [-1, -1, 2] ]</p><h3 id="思路草稿-3"><a href="#思路草稿-3" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.jpg" alt="三数之和" style="width:50%;" /></p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">0</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">// 3.1 去重(i)</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 添加结果集</span></span><br><span class="line">                    result.add(Arrays.asList(nums[i],nums[left],nums[right]));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 3.2 right 去重</span></span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 3.3 left 去重</span></span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18.四数之和"></a>18.四数之和</h2><p>题意：给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><p><strong>注意：</strong>答案中不可以包含重复的四元组。</p><p>示例： 给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。 </p><p>满足要求的四元组集合为： [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]</p><h3 id="思路草稿-4"><a href="#思路草稿-4" class="headerlink" title="思路草稿"></a>思路草稿</h3><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.jpg" alt="四数之和" style="width:50%;" /></p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、剪枝</span></span><br><span class="line">        <span class="comment">// 第一个元素是正数且大于target的时候</span></span><br><span class="line">        <span class="comment">// 四数之和才不会等于target</span></span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">0</span>]&gt;<span class="number">0</span>&amp;&amp;nums[<span class="number">0</span>]&gt;target)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i&lt;nums.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// i 去重</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="comment">// j 去重</span></span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span> &amp;&amp; nums[j]==nums[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i]+nums[j]+nums[left]+nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));</span><br><span class="line">                        <span class="comment">// right 去重</span></span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// left 去重</span></span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>刷题常用API</title>
      <link href="/posts/2925158b.html"/>
      <url>/posts/2925158b.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一维</span></span><br><span class="line">String[] s = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line"><span class="type">char</span>[] b = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;;  </span><br><span class="line"><span class="comment">// 二维</span></span><br><span class="line"><span class="type">int</span>[][] c = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p><code>.length</code> <em>记得是属性而不是方法 <code>arr.length</code> 没有()</em></p><p>Arrays.sort 排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(<span class="type">int</span>[] arr)<span class="comment">//从小到大排序</span></span><br><span class="line">Arrays.sort(<span class="type">int</span>[] arr, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex) <span class="comment">// [)</span></span><br><span class="line">Arrays.sort(<span class="type">int</span>[] arr, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex, 比较器); <span class="comment">//一定是需要泛型</span></span><br><span class="line">Arrays.sort(arr, (o1, o2) -&gt; o2 - o1); <span class="comment">//数组全部 从大到小排序 跟Collections.sort()一样</span></span><br><span class="line">Arrays.sort(arr, <span class="number">0</span>, <span class="number">3</span>, (o1, o2) -&gt; o2 - o1); <span class="comment">//从大到小排序，只排序[0, 3)</span></span><br></pre></td></tr></table></figure><p>Arrays.fill填满一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">Arrays.fill(a, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>Arrays.copyOf / arr.clone() 复制一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> [] a =  <span class="keyword">new</span> <span class="title class_">int</span> [ <span class="number">5</span> ];</span><br><span class="line"><span class="type">int</span> [] newA = Array.copyOf(a,  <span class="number">5</span> );</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="type">int</span> [][] a = &#123;&#123; <span class="number">1</span> &#125;, &#123; <span class="number">1</span> , <span class="number">2</span> &#125;, &#123; <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> &#125;, &#123; <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span> &#125;, &#123; <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span> , <span class="number">5</span> &#125;&#125;; <span class="comment">// 不是5*5，第一维1 2 3 4 5</span></span><br><span class="line"><span class="type">int</span> [][] newa = a.clone();  <span class="comment">// 不是5*5矩阵</span></span><br></pre></td></tr></table></figure><p>相等比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.equals(arr1,arr2))</span><br></pre></td></tr></table></figure><p>arr1.equals(arr2)比较的是两个对象的地址，不是里面的数，而Arrays.equals重写了equals，所以，这里能比较元素是否相等。</p><p>二分查找法找指定元素的索引值（下标）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> []arr = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">System.out.println(Arrays.binarySearch(arr, <span class="number">20</span>)); <span class="comment">// 找不到的话返回-x</span></span><br></pre></td></tr></table></figure><p>截取数组：copeOf和copeOfRange</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> []arr = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;; </span><br><span class="line"><span class="type">int</span> []arr1 = Arrays.copyOf(arr, <span class="number">3</span>);<span class="comment">//截取arr数组的3个元素赋值给姓数组arr1  10 20 30 </span></span><br><span class="line"><span class="type">int</span> []arr = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line"><span class="type">int</span> []arr1 = Arrays.copyOfRange(arr,<span class="number">1</span>,<span class="number">3</span>);<span class="comment">// [) 10 20</span></span><br></pre></td></tr></table></figure><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();    <span class="comment">// 数组</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();    <span class="comment">// 链表</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">// 二维数组</span></span><br></pre></td></tr></table></figure><p>List接口方法:<strong>get, size, add, remove, subList</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.get(<span class="type">int</span> index)</span><br><span class="line">.size()</span><br><span class="line">.add(E e)    <span class="comment">// 在尾部添加一个元素e --- O(1)</span></span><br><span class="line">.add(<span class="type">int</span> index, E e)    <span class="comment">// 在index位置插一个元素e --- O(n)</span></span><br><span class="line">.remove(<span class="type">int</span> index)    <span class="comment">// 删除位于index的元素，并返回删除元素e</span></span><br><span class="line">list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">.subList(<span class="type">int</span> from, <span class="type">int</span> to)    <span class="comment">// 相当于返回原数组的一个片段,但不要对其进行改动，改动会影响原数组</span></span><br></pre></td></tr></table></figure><p><code>Collections.sort(list);</code> 从小到大排序</p><p><code>Collections.sort(list, (o1, o2) -&gt; o2 - o1);</code> 从大到小排序， 第二个参数为一个比较器</p><p><code>Collections.reverse(list);</code> 反转，倒序</p><p><code>Collections.max(list);</code> 取最大值</p><p><code>Collections.min(list);</code> 取最小值</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> StringBuilder(String str);<span class="comment">// 构建一个值为str的可变字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置index位置的char为ch --- O(1)</span></span><br><span class="line">.setCharAt(<span class="type">int</span> index, <span class="type">char</span> ch);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在offer位置的插入字符串str --- O(m + n)</span></span><br><span class="line">.insert(<span class="type">int</span> offset, String str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除index位置的char --- O(n)</span></span><br><span class="line">.deleteCharAt(<span class="type">int</span> index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除[start, end)位置的char --- O(n)</span></span><br><span class="line">.delete(<span class="type">int</span> start, <span class="type">int</span> end);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转缓存字符串 --- O(n)</span></span><br><span class="line">.reverse();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个与构建起或缓冲器内容相同的字符串 --- O(n)</span></span><br><span class="line">.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在此字符串追加str。</span></span><br><span class="line">append(String str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在此字符串追加str。</span></span><br><span class="line">append(StringBuilder str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将char的子数组追加到此字符串</span></span><br><span class="line">append(<span class="type">char</span>[] str, <span class="type">int</span> offset, <span class="type">int</span> len);</span><br></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从小到大排序</span></span><br><span class="line">Arrays.sort(<span class="type">int</span>[] arr)</span><br><span class="line"><span class="comment">// 从小到大排序 左闭右开[)</span></span><br><span class="line">Arrays.sort(<span class="type">int</span>[] arr, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span><br><span class="line"><span class="comment">// 数组全部 从大到小排序 跟Collections.sort()一样</span></span><br><span class="line">Arrays.sort(arr, (o1, o2) -&gt; o2 - o1);</span><br><span class="line"><span class="comment">// 从大到小排序，只排序[fromIndex, toIndex)</span></span><br><span class="line">Arrays.sort(arr, fromIndex, toIndex, (o1, o2) -&gt; o2 - o1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将指定arr数组作为列表返回</span></span><br><span class="line">Arrays.asList(arr)</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>方法：put, get, getOrDefault, containsKey, containsValue, keySet, values, isEmpty, size</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap; </span><br><span class="line"><span class="keyword">import</span> java.util.Iterator; </span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMap</span> &#123; </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">                Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(); </span><br><span class="line">                map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;a&quot;</span>); </span><br><span class="line">                map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;b&quot;</span>); </span><br><span class="line">                map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;c&quot;</span>); </span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 最简洁、最通用的遍历方式 </span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123; </span><br><span class="line">                        System.out.println(entry.getKey() + <span class="string">&quot; = &quot;</span> + entry.getValue()); </span><br><span class="line">                &#125; </span><br><span class="line">          </span><br><span class="line">          <span class="comment">//.keySet();    // 返回一个Set,这个Set中包含Map中所有的Key --- O(1)</span></span><br><span class="line">          <span class="keyword">for</span> (Character key : map.keySet()) &#123;</span><br><span class="line">    <span class="comment">// Operate with each key</span></span><br><span class="line">&#125;</span><br><span class="line">          <span class="comment">//.values();    // 返回一个Collection&lt;v&gt;,里面全是对应的每一个value --- O(1)</span></span><br><span class="line">          <span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">    <span class="comment">// Operate with each values</span></span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 把集合如Stack、Queue、List等Collection作为参数</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;....;</span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(list);</span><br></pre></td></tr></table></figure><h3 id="queue（队列）"><a href="#queue（队列）" class="headerlink" title="queue（队列）"></a>queue（队列）</h3><p>方法：offer, poll, peek, isEmpty, size</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Queue; </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestQueue</span> &#123; </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">           <span class="comment">// 初始化</span></span><br><span class="line">                Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Integer&gt;();</span><br><span class="line">          <span class="comment">// 把集合如Stack、Set、List等Collection作为参数</span></span><br><span class="line">          Set&lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(s);</span><br><span class="line">                <span class="comment">// 初始化队列 </span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; </span><br><span class="line">                        q.offer(i); <span class="comment">//入队</span></span><br><span class="line">                &#125; </span><br><span class="line">                System.out.println(<span class="string">&quot;-------1-----&quot;</span>); </span><br><span class="line">                <span class="comment">// 集合方式遍历，元素不会被移除 </span></span><br><span class="line">                <span class="keyword">for</span> (Integer x : q) &#123; </span><br><span class="line">                        System.out.println(x); </span><br><span class="line">                &#125; </span><br><span class="line">                System.out.println(<span class="string">&quot;-------2-----&quot;</span>); </span><br><span class="line">                <span class="comment">// 队列方式遍历，元素逐个被移除 </span></span><br><span class="line">                <span class="keyword">while</span> (q.peek() != <span class="literal">null</span>) &#123; </span><br><span class="line">                        System.out.println(q.poll()); <span class="comment">//出队</span></span><br><span class="line">                &#125; </span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stack（栈）"><a href="#Stack（栈）" class="headerlink" title="Stack（栈）"></a>Stack（栈）</h3><p>方法：push, pop, peek, isEmpty, size</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStack</span> &#123; </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">          <span class="comment">// 初始化</span></span><br><span class="line">                Stack&lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; </span><br><span class="line">                        s.push(i); <span class="comment">// 入栈</span></span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">// 集合遍历方式 </span></span><br><span class="line">                <span class="keyword">for</span> (Integer x : s) &#123; </span><br><span class="line">                        System.out.println(x); </span><br><span class="line">                &#125; </span><br><span class="line">                System.out.println(<span class="string">&quot;------1-----&quot;</span>); </span><br><span class="line">                <span class="comment">// 栈弹出遍历方式 </span></span><br><span class="line"><span class="comment">//                while (s.peek()!=null) &#123;     // 不健壮的判断方式，容易抛异常，正确写法是下面的 </span></span><br><span class="line">                <span class="keyword">while</span> (!s.isEmpty()) &#123; </span><br><span class="line">                        System.out.println(s.pop()); <span class="comment">// 出栈</span></span><br><span class="line">                &#125; </span><br><span class="line">                System.out.println(<span class="string">&quot;------2-----&quot;</span>); </span><br><span class="line">                <span class="comment">// 错误的遍历方式 </span></span><br><span class="line"><span class="comment">//                for (Integer x : s) &#123; </span></span><br><span class="line"><span class="comment">//                        System.out.println(s.pop()); </span></span><br><span class="line"><span class="comment">//                &#125; </span></span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Deque-双端队列"><a href="#Deque-双端队列" class="headerlink" title="Deque(双端队列)"></a>Deque(双端队列)</h3><ul><li><strong>addFirst()</strong> - 在双端队列的开头添加指定的元素。如果双端队列已满，则引发异常。</li><li><strong>addLast()</strong> - 在双端队列的末尾添加指定的元素。如果双端队列已满，则引发异常。</li><li><strong>offerFirst()</strong> - 在双端队列的开头添加指定的元素。如果双端队列已满，则返回false。</li><li><strong>offerLast()</strong> - 在双端队列的末尾添加指定的元素。如果双端队列已满，则返回false。</li><li><strong>getFirst()</strong> - 返回双端队列的第一个元素。如果双端队列为空，则引发异常。</li><li><strong>getLast()</strong> - 返回双端队列的最后一个元素。如果双端队列为空，则引发异常。</li><li><strong>peekFirst()</strong> - 返回双端队列的第一个元素。如果双端队列为空，则返回null。</li><li><strong>peekLast()</strong> - 返回双端队列的最后一个元素。如果双端队列为空，则返回null。</li><li><strong>removeFirst()</strong> - 返回并删除双端队列的第一个元素。如果双端队列为空，则引发异常。</li><li><strong>removeLast()</strong> - 返回并删除双端队列的最后一个元素。如果双端队列为空，则引发异常。</li><li><strong>pollFirst()</strong> - 返回并删除双端队列的第一个元素。如果双端队列为空，则返回null。</li><li><strong>pollLast()</strong> - 返回并删除双端队列的最后一个元素。如果双端队列为空，则返回null。</li></ul><h4 id="双端队列作为堆栈数据结构"><a href="#双端队列作为堆栈数据结构" class="headerlink" title="双端队列作为堆栈数据结构"></a>双端队列作为堆栈数据结构</h4><p>Java Collections框架的Stack类提供了堆栈的实现。</p><p>但是，建议Deque用作堆栈而不是<a href="https://www.cainiaojc.com/java/java-stack.html">Stack类</a>。这是因为Stack的方法是同步的。</p><p>以下是Deque接口提供的用于实现堆栈的方法：</p><ul><li>push() - 在双端队列的开头添加元素</li><li>pop() - 从双端队列的开头删除元素</li><li>peek() - 从双端队列的开头返回一个元素</li></ul><h3 id="PriorityQueue-优先级队列"><a href="#PriorityQueue-优先级队列" class="headerlink" title="PriorityQueue (优先级队列)"></a>PriorityQueue (优先级队列)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小根堆</span></span><br><span class="line">Queue&lt;Integer&gt; minH = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((i1, i2) -&gt; i1 - i2);    <span class="comment">// 小根堆，默认大小为11 相当于  new PriorityQueue&lt;&gt;(11,(i1, i2) -&gt; i2 - i1)</span></span><br><span class="line">Queue&lt;Integer&gt; minH = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">100</span>);  <span class="comment">// 定义一个默认容量有100的小根堆。在当中增加元素会扩容，只是开始指定大小。不是size，是capacity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大根堆</span></span><br><span class="line">Queue&lt;Integer&gt; maxH = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((i1, i2) -&gt; i2 - i1);    <span class="comment">// 大根堆，默认大小为11 相当于  new PriorityQueue&lt;&gt;(11, (i1, i2) -&gt; i2 - i1)</span></span><br><span class="line">Queue&lt;Integer&gt; maxH = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">100</span>, (i1, i2) -&gt; i2 - i1);    <span class="comment">// 定义一个默认容量有100的大根堆。在当中增加元素会扩容，只是开始指定大小</span></span><br></pre></td></tr></table></figure><ul><li>add() - 将指定的元素插入队列。如果队列已满，则会引发异常</li><li>offer() - 将指定的元素插入队列。如果队列已满，则返回false</li><li>peek()方法。返回队列的头部元素</li><li>remove() - 从队列中删除指定的元素</li><li>poll() - 返回并删除队列的开头</li><li>size() - 返回优先级队列的长度</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/posts/784dd132.html"/>
      <url>/posts/784dd132.html</url>
      
        <content type="html"><![CDATA[<p>用于一些标签测试</p><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><div id="aplayer" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="5228378910" data-server="netease" data-type="playlist" data-mode="random" data-autoplay="false" data-listmaxheight="340px" data-preload="auto" data-theme="#e3f2f5" data-volume="0.4" mutex="true"></div>]]></content>
      
      
      <categories>
          
          <category> 一些 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap源码(上)</title>
      <link href="/posts/235dfb88.html"/>
      <url>/posts/235dfb88.html</url>
      
        <content type="html"><![CDATA[<p>HashMap 最早出现在JDK1.2中，底层基于散列算法实现</p><ul><li>HashMap <strong>允许null 键和null 值</strong>，在计算哈键的哈希值时，<strong>null 键哈希值为0</strong>。</li><li>HashMap <strong>并不保证键值对的顺序</strong>，这意味着在进行某些操作后，键值对的顺序可能会发生变化。</li><li>HashMap 是<strong>非线程安全类</strong>，在多线程环境下可能会存在问题。</li></ul><p>HashMap在JDK 1.8中包括；1、散列表实现、2、扰动函数、3、初始化容量、4、负载因子、5、扩容元素拆分、6、链表树化、7、红黑树、8、插入、9、查找、10、删除、11、遍历、12、分段锁等等<br>这里我们先把目光放在前五项上，也就是关于数据结构的使用上。</p><h1 id="散列表实现（一个简单的HashMap）"><a href="#散列表实现（一个简单的HashMap）" class="headerlink" title="散列表实现（一个简单的HashMap）"></a>散列表实现（一个简单的HashMap）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;power&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;technology&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;environment&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] tab = <span class="keyword">new</span> <span class="title class_">String</span>[list.size()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String value : list) &#123;</span><br><span class="line">            <span class="comment">// 计算索引: 指定value的hash值 按位与 tab最大下标 保证不越界</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> value.hashCode() &amp; (tab.length - <span class="number">1</span>);</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;key: %d, value: %s&quot;</span>,key,value));</span><br><span class="line">            <span class="comment">// 如果数组当前索引中不存在value,赋值</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == tab[key]) &#123;</span><br><span class="line">                tab[key] = value;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 存在则将其链接起来</span></span><br><span class="line">            tab[key] = tab[key]+ <span class="string">&quot;-&gt;&quot;</span>+ value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(tab));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/hashmap-simple.png" alt="hashmap-simple"></p><h3 id="所存在的问题"><a href="#所存在的问题" class="headerlink" title="所存在的问题"></a>所存在的问题</h3><ol><li>所有的元素存放都需要一个索引位置，如果索引位置不够导致散列碰撞严重，那就没有达到预期的性能，也就失去了散列表的意义</li><li>在获取索引 ID 的计算公式中，需要数组长度是 2 的倍数（需要保证能进行按位与操作不越界），数组大小如何设定？</li><li>数组越小碰撞越大，数组越大碰撞越小，如何取舍时间与空间？</li><li>目前存放 7 个元素，已经有两个位置都存放了 2 个字符串，那么链表越来越长怎么优化？</li><li>随着元素的不断添加，数组长度不足扩容时，怎么把原有的元素拆分到新的位置上去？</li></ol><p>以上这些问题可以归纳为；扰动函数、初始化容量、负载因子、扩容方法以及链表和红黑树转换的使用等。</p><h1 id="扰动函数"><a href="#扰动函数" class="headerlink" title="扰动函数"></a>扰动函数</h1><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/hashmap-%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0.png" alt="hashmap-扰动函数"><br>在 HashMap 存放元素时候有这样一段代码来处理哈希值，这是 Java 8 的散列值扰动函数，用于优化散列效果。<br>理论上来说字符串的 hashCode是一个 int 类型值，那可以直接作为数组下标了，且不会出现碰撞。但是这个 hashCode 的取值范围是[-2147483648, 2147483647]， 有将近 40 亿的长度，谁也不能把数组初始化的这么大，内存也是放不下的。 我们<strong>默认初始化的 Map 大小是 16 个长度。</strong>DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4， 所以获取的 Hash 值并不能直接作为下标使用，需要与数组长度进行取模运算得到一个下标值，也就是我们上面做的散列列子。<br>hashMap 源码这里不只是直接获取哈希值，还进行了一次扰动计算，(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)。把哈希值右移 16 位，也就正好是自己长度的一半，之后与原哈希值做异或运算，这样就混合了原哈希值中的高位和低位，增大了<strong>随机性</strong>。<br><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/HashMap-%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0.drawio.png" alt="HashMap-扰动函数.drawio"><br>使用扰动函数就是为了增加随机性，让数据元素更加均衡的散列，减少hash碰撞，让数据存放和获取的效率更好</p><h1 id="初始化容量"><a href="#初始化容量" class="headerlink" title="初始化容量"></a>初始化容量</h1><p>散列数组需要一个 2 的倍数的长度，因为只有 2 的 倍数在减 1 的时候，才会出现 01111 这样的值。那么这里就有一个问题，我们在初始化 HashMap 的时候，如果传一个 17 个的值 new HashMap&lt;&gt;(17);，它会怎么处理呢？</p><h2 id="寻找最小二进制数"><a href="#寻找最小二进制数" class="headerlink" title="寻找最小二进制数"></a>寻找最小二进制数</h2><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/hashmap-%E5%AF%BB%E6%89%BE%E6%9C%80%E5%B0%8F2%E7%9A%84n%E6%96%B9%E6%95%B0.png" alt="hashmap-寻找最小2的n方数"></p><ul><li>在 HashMap 的初始化中，阀值 threshold，通过方法 tableSizeFor 进行计算，是根据初始化大小来计算的。</li><li>这个方法也就是要寻找比初始值大的，最小的那个 2 进制数值。比如传了 17，我应该找到的是 32。</li></ul><p>计算阀值大小的方法：<br><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/hashmap-tableSizeFor.png" alt="hashmap-tableSizeFor"></p><ul><li>MAXIMUM_CAPACITY = 1 &lt;&lt; 30，这个是临界范围，也就是最大容量。</li><li>乍一看可能有点晕😵怎么都在向右移位 1、2、4、8、16，这主要是为了 把二进制的各个位置都填上 1，当二进制的各个位置都是 1 以后，就是 一个标准的 2 的倍数减 1 了，最后把结果加 1 再返回即可。</li></ul><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/HashMap-%E8%AE%A1%E7%AE%97%E9%98%88%E5%80%BC.drawio.png" alt="HashMap-计算阈值.drawio"></p><h1 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment">* by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment">* MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><p>负载因子，可以理解成一辆车可承重重量超过某个阀值时，把货放到新的车上。<br><strong>在 HashMap 中，负载因子决定了数据量多少了以后进行扩容。</strong><br><em>这里要提到上面做的 HashMap 例子，我们准备了 6 个元素，但是最后还有 2 个位置空余，2 个 </em><br><em>位置存放了 2 个元素。 </em><br>所以可能即使你数据与数组容量一样大时也不一定能正正好好的把数组占满的，而是在某些小标位置出现了大量的碰撞，只能在同一个位置用链表存放，那么这样就失去了 Map 数组的性能。<br>要选择一个合理的大小下进行扩容，默认值 0.75 就是说当阀值容量占了 3/4 时赶紧扩容，减少 Hash 碰撞。同时 0.75 是一个默认构造值，在创建 HashMap 也可以调整，比如你希望用更多的空间换取时间，可以把负载因子调的更小一些，减少碰撞。</p><h1 id="扩容元素拆分"><a href="#扩容元素拆分" class="headerlink" title="扩容元素拆分"></a>扩容元素拆分</h1><p>为什么扩容，因为数组长度不足了。那扩容最直接的问题，就是需要把元素拆分到新的数组中。拆分元素的过程中，原 jdk1.7 中会需要重新计算哈希值，但是到 jdk1.8 中已经进行优化，不在需要重新计算，提升了拆分的性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;power&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;technology&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;environment&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;sad&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;god&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;yeah&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;uncle&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;PHP&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;C#&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;GO&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String value : list) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> value.hashCode() ^ (value.hashCode() &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">key16</span> <span class="operator">=</span> hash &amp; (<span class="number">16</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">key32</span> <span class="operator">=</span> hash &amp; (<span class="number">32</span> - <span class="number">1</span>);</span><br><span class="line">            System.out.println(</span><br><span class="line">                <span class="string">&quot;value:&quot;</span> + value +</span><br><span class="line">                <span class="string">&quot;\n\tkey(16):&quot;</span> + key16 +</span><br><span class="line">                <span class="string">&quot;\tBit值:&quot;</span> + Integer.toBinaryString(hash) + <span class="string">&quot; - &quot;</span> + Integer.toBinaryString(hash &amp; <span class="number">16</span>) +</span><br><span class="line">                <span class="string">&quot;\n\tkey(32):&quot;</span> + key32 +</span><br><span class="line">                <span class="string">&quot;\tBit值:&quot;</span> + Integer.toBinaryString(hash) + <span class="string">&quot; - &quot;</span> + Integer.toBinaryString(hash &amp; (<span class="number">32</span> - <span class="number">1</span>))</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">value:one</span><br><span class="line">key(16):7Bit值:11010111001100111 - 0</span><br><span class="line">key(32):7Bit值:11010111001100111 - 111</span><br><span class="line">value:power</span><br><span class="line">key(16):11Bit值:110010111101000111101011011 - 10000</span><br><span class="line">key(32):27Bit值:110010111101000111101011011 - 11011</span><br><span class="line">value:technology</span><br><span class="line">key(16):11Bit值:10011011111001110001111011101011 - 0</span><br><span class="line">key(32):11Bit值:10011011111001110001111011101011 - 1011</span><br><span class="line">value:environment</span><br><span class="line">key(16):2Bit值:11111010111000011100100011110010 - 10000</span><br><span class="line">key(32):18Bit值:11111010111000011100100011110010 - 10010</span><br><span class="line">value:hello</span><br><span class="line">key(16):11Bit值:101111010010001110100111011 - 10000</span><br><span class="line">key(32):27Bit值:101111010010001110100111011 - 11011</span><br><span class="line">value:world</span><br><span class="line">key(16):3Bit值:110110000010001110101010011 - 10000</span><br><span class="line">key(32):19Bit值:110110000010001110101010011 - 10011</span><br><span class="line">value:good</span><br><span class="line">key(16):13Bit值:1100001000000010001101 - 0</span><br><span class="line">key(32):13Bit值:1100001000000010001101 - 1101</span><br><span class="line">value:sad</span><br><span class="line">key(16):7Bit值:11011101111010111 - 10000</span><br><span class="line">key(32):23Bit值:11011101111010111 - 10111</span><br><span class="line">value:god</span><br><span class="line">key(16):13Bit值:11001000001111101 - 10000</span><br><span class="line">key(32):29Bit值:11001000001111101 - 11101</span><br><span class="line">value:yeah</span><br><span class="line">key(16):11Bit值:1110001000100000001011 - 0</span><br><span class="line">key(32):11Bit值:1110001000100000001011 - 1011</span><br><span class="line">value:uncle</span><br><span class="line">key(16):7Bit值:110101001000011100101000111 - 0</span><br><span class="line">key(32):7Bit值:110101001000011100101000111 - 111</span><br><span class="line">value:Java</span><br><span class="line">key(16):1Bit值:1000110001111001100001 - 0</span><br><span class="line">key(32):1Bit值:1000110001111001100001 - 1</span><br><span class="line">value:PHP</span><br><span class="line">key(16):9Bit值:10011010101011001 - 10000</span><br><span class="line">key(32):25Bit值:10011010101011001 - 11001</span><br><span class="line">value:C#</span><br><span class="line">key(16):0Bit值:100001000000 - 0</span><br><span class="line">key(32):0Bit值:100001000000 - 0</span><br><span class="line">value:C</span><br><span class="line">key(16):3Bit值:1000011 - 0</span><br><span class="line">key(32):3Bit值:1000011 - 11</span><br><span class="line">value:Python</span><br><span class="line">key(16):15Bit值:10001111011000111001001110011111 - 10000</span><br><span class="line">key(32):31Bit值:10001111011000111001001110011111 - 11111</span><br><span class="line">value:GO</span><br><span class="line">key(16):8Bit值:100011101000 - 0</span><br><span class="line">key(32):8Bit值:100011101000 - 1000</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>这里我们随机使用一些字符串计算他们分别在 16 位长度和 32 位长度数组下的索引分配情况，看哪些数据被重新路由到了新的地址<br>同时，这里还可以观察出一个非常重要的信息，原哈希值与扩容新增出来的长度 16，进行&amp;运算，如果值等于 0，则下标位置不变。如果不为 0，那么新的位置则是原来位置上加 16。多次测试发现这里的16可以扩展为 2 的n次方。即：<br><strong>原哈希值（扰动哈希）与扩容新增出来的长度</strong> <strong>2 的 n 次方，进行&amp;运算</strong></p><ul><li><strong>如果值等于 0，则下标位置不变。</strong></li><li><strong>如果不为 0，那么新的位置则是原来位置上加 16</strong></li></ul><p><strong>由此可见,java 8 的散列值扰动函数，在优化散列效果的同时，也让扩容元素变得更加的方便。</strong></p><p>补充：</p><h1 id="hashCode的计算逻辑中，为什么是31作为乘数"><a href="#hashCode的计算逻辑中，为什么是31作为乘数" class="headerlink" title="hashCode的计算逻辑中，为什么是31作为乘数?"></a>hashCode的计算逻辑中，为什么是31作为乘数?</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/8357772/1669364656831-86bd1635-b5cb-416e-8478-14dc64afdfd8.png" alt="img"></p><p>在获取hashCode的源码中可以看到，有一个固定值31，在for循环每次执行时进行乘积计算，循环后的公式：s[0]<em>31^(n-1) + s[1]</em>31^(n-2) + … + s[n-1] </p><p><strong>那么这里为什么选择31作为乘积值呢？</strong></p><ol><li>31作为一个奇质数，如果选择偶数会导致乘积运算<strong>数据溢出</strong></li><li>在2进制中，2的5次方是32，也就是 31<em>i == （i&lt;&lt;5）-1; </em>，<em>这主要是说明<strong>乘积运算可以用位移提升性能</strong>。同时<em>*JVM虚拟机也自动支持这类优化</em></em></li><li>在不同的乘数下测试hash碰撞的结果发现：当31作为乘数时，碰撞概率很小，基本稳定，再往下走，199的碰撞概率虽然更小，但乘积运算之后的范围值已经完全超过int的取值范围【-2^31 ~ 2^31-1】，如果用 199 这个数，再返回int值，就会发生数据丢失的问题。所以我们选择<strong>碰撞概率较小 ，且乘积运算之后在int范围内的最小数</strong>。也就是31</li><li>31作为乘数时，<strong>数据更加分散，散列分布的效果更明显，基本在每个范围内都有数据存放</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 我的学习日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SnowFlake算法</title>
      <link href="/posts/9a32a87d.html"/>
      <url>/posts/9a32a87d.html</url>
      
        <content type="html"><![CDATA[<p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。</p><p>其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p><h2 id="具体介绍"><a href="#具体介绍" class="headerlink" title="具体介绍"></a>具体介绍</h2><p>雪花算法是 64 位 的二进制，一共包含了四部分：</p><ul><li>1位是符号位，也就是最高位，始终是0，没有任何意义，因为要是唯一计算机二进制补码中就是负数，0才是正数。</li><li>41位是时间戳，具体到毫秒，41位的二进制可以使用69年，因为时间理论上永恒递增，所以根据这个排序是可以的。</li><li>10位是机器标识，可以全部用作机器ID，也可以用来标识机房ID + 机器ID，10位最多可以表示1024台机器。</li><li>12位是计数序列号，也就是同一台机器上同一时间，理论上还可以同时生成不同的ID，12位的序列号能够区分出4096个ID。</li></ul><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/snowflake.png" alt="snowflake"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.domain.support.ids;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ray</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/12 16:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 雪花算法生成随机ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnowFlake</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(SnowFlake.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心(机房)ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> dataCenterId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> workerId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同一时间的序列号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> sequence;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间戳:2020-05-20 08:00:00 +0800 CST</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">twepoch</span> <span class="operator">=</span> <span class="number">1589923200000L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机房ID所占位数 5bit 最大:11111(二进制)--&gt;31(十进制)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">dataCenterIdBits</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID所占位数 5bit 最大:11111(二进制)--&gt;31(十进制)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">workerIdBits</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同一时间的序列号所占位数 12bit 最大:111111111111(二进制)--&gt;4095(十进制)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">sequenceBits</span> <span class="operator">=</span> <span class="number">12L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5 bit最多只能有31个数字，即机房id数量最多只能是32以内</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">maxDataCenterId</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; dataCenterIdBits);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5 bit最多只能有31个数字，即机器id数量最多只能是32以内</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">maxWorkerId</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号掩码(0b111111111111==&gt;0xfff==&gt;4096)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">sequenceMask</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID偏移量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">workerIdShift</span> <span class="operator">=</span> sequenceBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机房ID偏移量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">dataCenterIdShift</span> <span class="operator">=</span> workerIdBits + sequenceBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间戳偏移量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">timestampLeftShift</span> <span class="operator">=</span> dataCenterIdBits + workerIdBits + sequenceBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最近一次时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">lastTimestamp</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SnowFlake</span><span class="params">(<span class="type">long</span> dataCenterId, <span class="type">long</span> workerId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(dataCenterId,workerId,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SnowFlake</span><span class="params">(<span class="type">long</span> dataCenterId, <span class="type">long</span> workerId, <span class="type">long</span> sequence)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( dataCenterId&gt;maxDataCenterId || dataCenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;机房ID 大于最大值 %d 或者 小于 0&quot;</span>,maxDataCenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( workerId&gt;maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;机器ID 大于最大值 %d 或者 小于 0&quot;</span>,maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;机器启动中: 时间戳偏移量:&#123;&#125;,机房ID占位:&#123;&#125;,机器ID占位:&#123;&#125;,序列号占位:&#123;&#125;,机器ID:&#123;&#125;&quot;</span>,</span><br><span class="line">                timestampLeftShift,dataCenterIdBits,workerIdBits,sequenceBits,workerId);</span><br><span class="line">        <span class="built_in">this</span>.dataCenterId = dataCenterId;</span><br><span class="line">        <span class="built_in">this</span>.workerId = workerId;</span><br><span class="line">        <span class="built_in">this</span>.sequence = sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取机房ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 机房ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getDataCenterId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataCenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取机器ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 机器ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getWorkerId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workerId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 上一次生成ID的时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getLastTimestamp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastTimestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个随机ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 随机ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTimestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentTimestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;时间回退,最新时间戳:&#123;&#125;&quot;</span>,lastTimestamp);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;时间回退,拒绝生成ID,实际相差: %d&quot;</span>,lastTimestamp - currentTimestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去重</span></span><br><span class="line">        <span class="keyword">if</span> (currentTimestamp == lastTimestamp) &#123;</span><br><span class="line">            sequence = (sequenceMask+<span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果 sequence 序列号 大于 4095</span></span><br><span class="line">            <span class="keyword">if</span>(sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                currentTimestamp = nextTimestamp(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是当前时间第一次生成ID,就初始化为0</span></span><br><span class="line">            sequence = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录最新时间戳</span></span><br><span class="line">        lastTimestamp = currentTimestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 偏移计算生成随机ID</span></span><br><span class="line">        <span class="keyword">return</span> ((currentTimestamp - twepoch) &lt;&lt; timestampLeftShift) |</span><br><span class="line">                (dataCenterId &lt;&lt; dataCenterIdShift) |</span><br><span class="line">                (workerId &lt;&lt; workerIdShift) |</span><br><span class="line">                sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">nextTimestamp</span><span class="params">(<span class="type">long</span> lastTimestamp)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTimestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果当前时间戳小于等于 序列号已经超过4095 那个时间戳</span></span><br><span class="line">        <span class="comment">// 继续获取最新时间戳</span></span><br><span class="line">        <span class="keyword">if</span> (currentTimestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            currentTimestamp = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> currentTimestamp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/snowflake_shift.png" alt="snowflake_shift"></p><ul><li>最后将三部分(时间戳、机器ID、序列号)按照偏移量进行移位操作，然后按位或将其组合即可得到随机生成的唯一ID</li></ul><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ul><li><p>由于41位是时间戳，我们的时间计算是从1970年开始的，只能使用69年，为了不浪费，其实我们可以用时间的相对值，也就是以项目开始的时间为基准时间，往后可以使用69年。获取唯一ID的服务，对处理速度要求比较高，所以我们全部使用位运算以及位移操作，获取当前时间可以使用<code>System.currentTimeMillis()</code>。</p></li><li><h3 id="时间回拨问题"><a href="#时间回拨问题" class="headerlink" title="时间回拨问题"></a>时间回拨问题</h3><p>在获取时间的时候，可能会出现<code>时间回拨</code>的问题，时间回拨其实就是服务器上的时间突然倒退到之前的时间。</p><ol><li>人为原因，把系统环境的时间改了。</li><li>有时候不同的机器上需要同步时间，可能不同机器之间存在误差，那么可能会出现时间回拨问题。</li></ol><p><strong>解决方案</strong></p><ol><li>回拨时间小的时候，不生成 ID，循环等待到时间点到达。</li><li>上面的方案只适合时钟回拨较小的，如果间隔过大，阻塞等待，肯定是不可取的，因此要么超过一定大小的回拨直接报错，拒绝服务，或者有一种方案是利用拓展位，回拨之后在拓展位上加1就可以了，这样ID依然可以保持唯一。但是这个要求我们提前预留出位数，要么从机器id中，要么从序列号中，腾出一定的位，在时间回拨的时候，这个位置 <code>+1</code>。</li></ol></li></ul><h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><h3 id="1-第一位为什么不使用"><a href="#1-第一位为什么不使用" class="headerlink" title="1. 第一位为什么不使用?"></a>1. 第一位为什么不使用?</h3><p>在计算机的表示中，第一位是符号位，0表示整数，第一位如果是1则表示负数，我们用的ID默认就是正数，所以默认就是0，那么这一位默认就没有意义。</p><h3 id="2-机器位怎么用？"><a href="#2-机器位怎么用？" class="headerlink" title="2.机器位怎么用？"></a>2.机器位怎么用？</h3><p>机器位或者机房位，一共10 bit，如果全部表示机器，那么可以表示1024台机器，如果拆分，5 bit 表示机房，5bit表示机房里面的机器，那么可以有32个机房，每个机房可以用32台机器。</p><h3 id="3-twepoch表示什么？"><a href="#3-twepoch表示什么？" class="headerlink" title="3. twepoch表示什么？"></a>3. twepoch表示什么？</h3><p>由于时间戳只能用69年，我们的计时又是从1970年开始的，所以这个<code>twepoch</code>表示从项目开始的时间，用生成ID的时间减去<code>twepoch</code>作为时间戳，可以使用更久。</p><h3 id="4-1L-1L-lt-lt-x-表示什么？"><a href="#4-1L-1L-lt-lt-x-表示什么？" class="headerlink" title="4. -1L ^ (-1L &lt;&lt; x) 表示什么？"></a>4. -1L ^ (-1L &lt;&lt; x) 表示什么？</h3><p>表示 x 位二进制可以表示多少个数值，假设x为3：</p><p>在计算机中，第一位是符号位，负数的反码是除了符号位，1变0，0变1, 而补码则是反码+1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1L 原码：1000 0001</span><br><span class="line">-1L 反码：1111 1110</span><br><span class="line">-1L 补码：1111 1111</span><br></pre></td></tr></table></figure><p>从上面的结果可以知道，<strong>-1L其实在二进制里面其实就是全部为1</strong>,那么 -1L 左移动 3位，其实得到 <code>1111 1000</code>，也就是最后3位是0，再与<code>-1L</code>异或计算之后，其实得到的，就是后面3位全是1。</p><p><code>-1L ^ (-1L &lt;&lt; x)</code>表示的其实就是x位全是1的值，也就是x位的二进制能表示的最大数值。</p><h3 id="5-时间戳比较"><a href="#5-时间戳比较" class="headerlink" title="5.时间戳比较"></a>5.时间戳比较</h3><p>在获取时间戳小于上一次获取的时间戳的时候，不能生成ID，而是继续循环，直到生成可用的ID，这里没有使用拓展位防止时钟回拨。</p><h3 id="6-前端直接使用发生精度丢失"><a href="#6-前端直接使用发生精度丢失" class="headerlink" title="6.前端直接使用发生精度丢失"></a>6.前端直接使用发生精度丢失</h3><p>如果前端直接使用服务端生成的 long 类型 id，会发生精度丢失的问题，因为 JS 中Number是16位的（指的是十进制的数字），而雪花算法计算出来最长的数字是19位的，这个时候需要用 String 作为中间转换，输出到前端即可。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>手写Spring</title>
      <link href="/posts/8cc15261.html"/>
      <url>/posts/8cc15261.html</url>
      
        <content type="html"><![CDATA[<h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h2 id="Step01：创建简单的Bean容器"><a href="#Step01：创建简单的Bean容器" class="headerlink" title="Step01：创建简单的Bean容器"></a>Step01：创建简单的Bean容器</h2><h3 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h3><ol><li>IOC：控制反转，简单来说就是一个对象定义其依赖关系而不创建它们的过程。 </li><li>Bean规范：所有属性都是private，提供默认构造、getter、setter方法的公共类。</li><li>Bean：是符合Bean规范的Java对象。 </li><li>Spring Bean 容器：管理对象及其依赖，以及依赖的注入。 </li></ol><h3 id="设计："><a href="#设计：" class="headerlink" title="设计："></a>设计：</h3><p>Spring Bean 容器场景下，选择HashMap作为存放数据的具体数据结构。 </p><ol><li>定义Bean </li><li>注册Bean </li><li>根据key值获取Bean</li></ol><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><p>BeanDefinition ：</p><ol><li>定义Bean ： 定义一个Object类型存放对象，通过构造函数传入 </li></ol><p>BeanFactory：</p><ol><li>注册Bean：通过 HashMap 存放定义好的Bean即 BeanDefinition</li><li>获取Bean：通过 key 值 即 Bean 的名字，取出注册好的Bean</li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step01.png" alt="step01"></p><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_beanFactory</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化Bean工厂</span></span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义 bean</span></span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(<span class="keyword">new</span> <span class="title class_">UserService</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册 bean</span></span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;userService&quot;</span>,beanDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取bean</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) beanFactory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.queryUserInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Step02：实现Bean的定义、注册、获取"><a href="#Step02：实现Bean的定义、注册、获取" class="headerlink" title="Step02：实现Bean的定义、注册、获取"></a>Step02：实现Bean的定义、注册、获取</h2><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step02.png" alt="step02"></p><h3 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_beanFactory</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化Bean工厂</span></span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义 bean</span></span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(UserService.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册 bean</span></span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;userService&quot;</span>,beanDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取bean</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) beanFactory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.queryUserInfo();</span><br><span class="line"></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService_singleton</span> <span class="operator">=</span> (UserService) beanFactory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService_singleton.queryUserInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Step03：解决含有构造函数的Bean对象的实例化，加入对象实例化策略"><a href="#Step03：解决含有构造函数的Bean对象的实例化，加入对象实例化策略" class="headerlink" title="Step03：解决含有构造函数的Bean对象的实例化，加入对象实例化策略"></a>Step03：解决含有构造函数的Bean对象的实例化，加入对象实例化策略</h2><h3 id="实现：-1"><a href="#实现：-1" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>在BeanFactory上重载getBean函数，增加构造函数的入参信息，方便实例化。 </p></li><li><p>创建实例化策略接口，目前有两种方式：JDK自带的方法DeclaredConstructor和Cglib动态创建 </p></li><li><p>定义两种实例化策略的具体实现。 </p></li><li><p>创建策略调用，首先通过beanClass.getDeclaredConstructors()获取bean对象的所有构造函数，这里简单比对入参个数与构造函数的参数个数是否一致，来选择需要具体实例化的对象。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">createBeanInstance</span><span class="params">(BeanDefinition beanDefinition, String beanName, Object[] args)</span> &#123;</span><br><span class="line">  <span class="type">Constructor</span> <span class="variable">constructorToUse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">  Constructor&lt;?&gt;[] declaredConstructors = beanClass.getDeclaredConstructors(); <span class="comment">// 获取所有构造函数</span></span><br><span class="line">  <span class="keyword">for</span> (Constructor ctor : declaredConstructors) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != args &amp;&amp; ctor.getParameterTypes().length == args.length) &#123; <span class="comment">// 简单比对入参个数</span></span><br><span class="line">      constructorToUse = ctor;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getInstantiationStrategy().instantiate(beanDefinition, beanName, constructorToUse, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><ol><li>通过第三章和第四章的学习，感受到了一个好的代码结构设计对于整个工程的重要性，这直接决定后期维护与扩展是否可行便利。</li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step03.png" alt="step03"></p><h2 id="Step04：解决含有属性的Bean对象的实例化，在实例化之后填充属性"><a href="#Step04：解决含有属性的Bean对象的实例化，在实例化之后填充属性" class="headerlink" title="Step04：解决含有属性的Bean对象的实例化，在实例化之后填充属性"></a>Step04：解决含有属性的Bean对象的实例化，在实例化之后填充属性</h2><h3 id="实现：-2"><a href="#实现：-2" class="headerlink" title="实现："></a>实现：</h3><ol><li>定义属性类PropertyValue以及PropertyValues，用于传递Bean对象中的属性信息。</li><li>定义Bean对象引用类BeanReference，用于后续对象属性为bean对象时的实例化以及属性填充。 </li><li>补全Bean定义，加入PropertyValues属性，便于Bean注册时传递属性信息。 </li><li>在对象实例化之后，通过其定义信息获取属性列表，循环进行填充操作。当遇到BeanReference时，即存在依赖时，需要递归获取该引用的实例化，进而填充属性。 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bean 属性填充</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyPropertyValues</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> beanDefinition.getPropertyValues();</span><br><span class="line">    <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues.getPropertyValues()) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> propertyValue.getName();</span><br><span class="line">      <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> propertyValue.getValue();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanReference) &#123;</span><br><span class="line">        <span class="comment">// A 依赖 B，获取 B 的实例化</span></span><br><span class="line">        <span class="type">BeanReference</span> <span class="variable">beanReference</span> <span class="operator">=</span> (BeanReference) value;</span><br><span class="line">        value = getBean(beanReference.getBeanName());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 属性填充</span></span><br><span class="line">      BeanUtil.setFieldValue(bean, name, value);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Error setting property values：&quot;</span> + beanName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试：-2"><a href="#测试：-2" class="headerlink" title="测试："></a>测试：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_BeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.初始化 BeanFactory</span></span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. UserDao 注册</span></span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;userDao&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(UserDao.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. UserService 设置属性[uId、userDao]</span></span><br><span class="line">        <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyValues</span>();</span><br><span class="line">        propertyValues.addPropertyValue(<span class="keyword">new</span> <span class="title class_">PropertyValue</span>(<span class="string">&quot;uId&quot;</span>, <span class="string">&quot;10002&quot;</span>));</span><br><span class="line">        propertyValues.addPropertyValue(<span class="keyword">new</span> <span class="title class_">PropertyValue</span>(<span class="string">&quot;userDao&quot;</span>,<span class="keyword">new</span> <span class="title class_">BeanReference</span>(<span class="string">&quot;userDao&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. UserService 注入bean</span></span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(UserService.class, propertyValues);</span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;userService&quot;</span>, beanDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. UserService 获取bean</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) beanFactory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.queryUserInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h3><ol><li><p>在最后测试中，报出异常  <em>Instantiation of bean failed</em>  ，经过单步调试之后，发现是由于存在依赖关系(A依赖于B)，递归获取实例化时，因为 B 注册 Bean 定义信息时并无属性列表，从而导致填充属性获取属性列表时，报空指针异常，导致  <em>Error setting property values</em> 异常，进而抛出 上级异常 <em>Instantiation of bean failed</em> 。发现问题之后，第一时间想到的 if..else ，结果也是成功输出。回过头来看，可以在 BeanDefinition 的构造函数上做优化，当没有属性列表或属性列表为空时，直接new 实例化属性列表，从而解决空指针异常，程序也就能正常运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BeanDefinition</span><span class="params">(Class beanClass, PropertyValues propertyValues)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.beanClass = beanClass;</span><br><span class="line">  <span class="built_in">this</span>.propertyValues = propertyValues != <span class="literal">null</span> ? propertyValues : <span class="keyword">new</span> <span class="title class_">PropertyValues</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step04.png" alt="step04"></p><h2 id="Step05：解放双手，利用资源加载器解析xml文件注册Bean定义信息，简化创建过程"><a href="#Step05：解放双手，利用资源加载器解析xml文件注册Bean定义信息，简化创建过程" class="headerlink" title="Step05：解放双手，利用资源加载器解析xml文件注册Bean定义信息，简化创建过程"></a>Step05：解放双手，利用资源加载器解析xml文件注册Bean定义信息，简化创建过程</h2><h3 id="实现：-3"><a href="#实现：-3" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>定义Resource接口，提供获取字节流的方法。 </p></li><li><p>实现Resoure接口。获取三种不同文件流操作。  </p><ul><li><p>ClassPath：classLoader.getResourceAsStream(path)</p></li><li><p>FileSystem：Files.newInputStream(this.file.toPath())</p></li><li><p>URL：this.url.openConnection().getInputStream() </p></li></ul></li><li><p>包装资源加载器，将三种资源加载方式集中到统一的接口下进行处理。</p><ol><li>定义资源加载接口ResourceLoader，提供获取资源的方法。 </li><li>实现资源加载接口ResourceLoader，判断地址类型从而获取对应的资源。 </li></ol></li><li><p>定义 加载Bean定义 接口 BeanDefinitionLoader，提供 获取Bean定义的注册信息 getRegistry() ，getResourceLoader() 资源加载 以及 三个加载Bean定义的方法。 </p></li><li><p>定义读取Bean定义的抽象类 AbstractBeanDefinitionReader，通过构造函数的形式让调用方将BeanDefinitionRegistry和ResourceLoader传递进来，从而实现接口 的 获取Bean定义注册getRegistry()以及getResourceLoader()资源加载 方法，这样将三个加载Bean定义的方法所需要用到的工具，事先交给抽象类实现，保证了三个具体操作不被污染。</p></li><li><p>创建xml文件处理类 XmlBeanDefinitionReader，通过继承 AbstractBeanDefinitionReader 抽象类，实现三个加载Bean定义的方法，通过解析xml文件定义并注册Bean。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doLoadBeanDefinitions</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">  <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> XmlUtil.readXML(inputStream);</span><br><span class="line">  <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> doc.getDocumentElement();</span><br><span class="line">  <span class="type">NodeList</span> <span class="variable">childNodes</span> <span class="operator">=</span> root.getChildNodes();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childNodes.getLength(); i++) &#123;</span><br><span class="line">    <span class="comment">// 判断元素</span></span><br><span class="line">    <span class="keyword">if</span> (!(childNodes.item(i) <span class="keyword">instanceof</span> Element)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">// 判断对象</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;bean&quot;</span>.equals(childNodes.item(i).getNodeName())) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析标签</span></span><br><span class="line">    <span class="type">Element</span> <span class="variable">bean</span> <span class="operator">=</span> (Element) childNodes.item(i);</span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取 Class，方便获取类中的名称</span></span><br><span class="line">    Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">    <span class="comment">// 优先级 id &gt; name</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> StrUtil.isNotEmpty(id) ? id : name;</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isEmpty(beanName)) &#123;</span><br><span class="line">      beanName = StrUtil.lowerFirst(clazz.getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义Bean</span></span><br><span class="line">    <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(clazz);</span><br><span class="line">    <span class="comment">// 读取属性并填充</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bean.getChildNodes().getLength(); j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(bean.getChildNodes().item(j) <span class="keyword">instanceof</span> Element)) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="string">&quot;property&quot;</span>.equals(bean.getChildNodes().item(j).getNodeName())) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="comment">// 解析标签：property</span></span><br><span class="line">      <span class="type">Element</span> <span class="variable">property</span> <span class="operator">=</span> (Element) bean.getChildNodes().item(j);</span><br><span class="line">      <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> property.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">attrValue</span> <span class="operator">=</span> property.getAttribute(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">attrRef</span> <span class="operator">=</span> property.getAttribute(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">      <span class="comment">// 获取属性值：引入对象、值对象</span></span><br><span class="line">      <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> StrUtil.isNotEmpty(attrRef) ? <span class="keyword">new</span> <span class="title class_">BeanReference</span>(attrRef) : attrValue;</span><br><span class="line">      <span class="comment">// 创建属性信息</span></span><br><span class="line">      <span class="type">PropertyValue</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyValue</span>(attrName, value);</span><br><span class="line">      beanDefinition.getPropertyValues().addPropertyValue(propertyValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查是否重复注册</span></span><br><span class="line">    <span class="keyword">if</span> (getRegistry().containsBeanDefinition(beanName)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Duplicate beanName[&quot;</span> + beanName + <span class="string">&quot;] is not allowed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册 BeanDefinition</span></span><br><span class="line">    getRegistry().registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对目前spring框架的优化： </p><ul><li>对 BeanFactory 接口，新增按照类型获取Bean的方法。 </li><li>新增 ListableBeanFactory 接口，继承 BeanFactory 接口，提供 按照类型返回 Bean 实例 以及 返回注册表中所有的Bean名称 的方法。 </li><li>新增 HierarchicalBeanFactory 接口，继承 BeanFactory 接口，属于扩展工厂的层次子接口。 </li><li>新增 AutowireCapableBeanFactory 接口，继承 BeanFactory 接口，用于自动化处理工厂配置。 </li><li>新增 ConfigurableBeanFactory 接口，用于获取BeanPostProcessor,BeanClassLoader 等一系列的配置 </li><li>新增 ConfigurableListableBeanFactory 接口，提供分析、修改以及预先实例化Bean的操作方法。</li><li>令 DefaultListableBeanFactory 实现 ConfigurableListableBeanFactory ， 新增 查询是否包含指定beanDefinition 、按照指定类型获取Bean 以及 获取所有 BeanDefinitionNames。</li></ul></li></ol><h3 id="测试：-3"><a href="#测试：-3" class="headerlink" title="测试："></a>测试：</h3><p><strong>spring.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ray.springframework.bean.UserDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ray.springframework.bean.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;uId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10001&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ApiTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.IoUtil;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.bean.UserDao;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.bean.UserService;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValue;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanDefinition;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanReference;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.xml.XmlBeanDefinitionReader;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/17 15:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_BeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.初始化 BeanFactory</span></span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. UserDao 注册</span></span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;userDao&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(UserDao.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. UserService 设置属性[uId、userDao]</span></span><br><span class="line">        <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyValues</span>();</span><br><span class="line">        propertyValues.addPropertyValue(<span class="keyword">new</span> <span class="title class_">PropertyValue</span>(<span class="string">&quot;uId&quot;</span>, <span class="string">&quot;10001&quot;</span>));</span><br><span class="line">        propertyValues.addPropertyValue(<span class="keyword">new</span> <span class="title class_">PropertyValue</span>(<span class="string">&quot;userDao&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanReference</span>(<span class="string">&quot;userDao&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. UserService 注入bean</span></span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(UserService.class, propertyValues);</span><br><span class="line">        beanFactory.registerBeanDefinition(<span class="string">&quot;userService&quot;</span>, beanDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. UserService 获取bean</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) beanFactory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> userService.queryUserInfo();</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        resourceLoader = <span class="keyword">new</span> <span class="title class_">DefaultResourceLoader</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_classpath</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(<span class="string">&quot;classpath:important.properties&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> IoUtil.readUtf8(inputStream);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_xml</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.初始化 BeanFactory</span></span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取配置文件&amp;注册Bean</span></span><br><span class="line">        <span class="type">XmlBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">        reader.loadBeanDefinitions(<span class="string">&quot;classpath:spring.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取Bean对象调用方法</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> beanFactory.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> userService.queryUserInfo();</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step05.png" alt="step05"></p><h2 id="Step06：应用上下文，对Bean的实例化过程进行扩展"><a href="#Step06：应用上下文，对Bean的实例化过程进行扩展" class="headerlink" title="Step06：应用上下文，对Bean的实例化过程进行扩展"></a>Step06：应用上下文，对Bean的实例化过程进行扩展</h2><h3 id="实现：-4"><a href="#实现：-4" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>定义两个扩展接口。 </p><ul><li>BeanFactoryPostProcessor：提供在Bean对象定义注册后实例化前，对Bean定义的属性进行修改的操作。 </li><li>BeanPostProcessor：提供在Bean对象实例化后对Bean直接进行修改的操作。分为Bean对象初始化前与Bean对象初始化后。 </li></ul></li><li><p>定义 ApplicationContext 上下文接口，继承于ListableBeanFactory，用于获取父类上下文。 </p></li><li><p>定义 ConfigurableApplicationContext 接口，继承于ApplicationContext，提供 refresh() 刷新容器的方法。</p></li><li><p>定义 AbstractApplicationContext 抽象类，实现ConfigurableApplicationContext接口，实现refresh方法。并继承DefaultResourceLoader以加载xml文件，从而实现Bean的定义注册。另外，AbstractApplicationContext 抽象类提供 refreshBeanFactory(）创建 BeanFactory，并加载 BeanDefinition以及getBeanFactory() 获取Bean工厂方法供继承类实现。 </p><p>refresh 刷新容器的实现过程：</p><ol><li>创建 BeanFactory，并通过 XML 文件加载 BeanDefinition </li><li>获取 BeanFactory </li><li>在 Bean 实例化之前，执行 BeanFactoryPostProcessor </li><li>BeanPostProcessor 需要提前于其他 Bean 对象实例化之前执行注册操作，从而保证在实例化过程能正常获取到BeanPostProcessor以达到自定义修改Bean的效果。</li><li>提前实例化单例Bean对象</li></ol></li><li><p>定义 AbstractRefreshableApplicationContext 抽象类，继承于AbstractApplicationContext 抽象类，实现refreshBeanFactory(）创建 BeanFactory，并加载 BeanDefinition以及getBeanFactory() 获取Bean工厂方法，并提供loadBeanDefinitions(DefaultListableBeanFactory) 加载xml文件定义并注册Bean对象 方法供继承类实现。 </p></li><li><p>定义 AbstractXmlApplicationContext 抽象类，继承于AbstractRefreshableApplicationContext 抽象类，实现loadBeanDefinitions(DefaultListableBeanFactory)  加载xml文件定义并注册Bean对象 方法，并提供 getConfigLocations() 方法 从入口上下文处获取配置文件路径。 </p></li><li><p>创建 ClassPathXmlApplicationContext 应用上下文实现类，继承于AbstractXmlApplicationContext 抽象类，实现 getConfigLocations() 方法，返回配置文件路径，使资源加载能够正常执行。并且这里通过构造函数的方式拿到配置文件路径去调用层层继承下来的refresh() 刷新容器的方法，从而实现Bean对象的扩展。</p></li><li><p>补全 AutowireCapableBeanFactory 接口，增加 执行BeanPostProcessor 前置和后置的方法。 </p></li><li><p>补全 AbstractAutowireCapableBeanFactory 类，在实例化Bean之后添加执行Bean的初始化方法以及执行BeanPostProcessor 前置和后置方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValue;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.AutowireCapableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanDefinition;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/15 17:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">AutowireCapableBeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">InstantiationStrategy</span> <span class="variable">instantiationStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InstantiationStrategy <span class="title function_">getInstantiationStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instantiationStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInstantiationStrategy</span><span class="params">(InstantiationStrategy instantiationStrategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.instantiationStrategy = instantiationStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object[] args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bean = createBeanInstance(beanDefinition, beanName, args);</span><br><span class="line">            applyPropertyValues(beanName, bean, beanDefinition);</span><br><span class="line">            <span class="comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法</span></span><br><span class="line">            bean = initializeBean(beanName,bean,beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiation of bean failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addSingleton(beanName, bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createBeanInstance</span><span class="params">(BeanDefinition beanDefinition, String beanName, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructorToUse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = beanClass.getDeclaredConstructors(); <span class="comment">// 获取构造函数的个数</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor ctor : declaredConstructors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != args &amp;&amp; ctor.getParameterTypes().length == args.length) &#123; <span class="comment">// 简单比对入参个数</span></span><br><span class="line">                constructorToUse = ctor;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getInstantiationStrategy().instantiate(beanDefinition, beanName, constructorToUse, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bean 属性填充</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyPropertyValues</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> beanDefinition.getPropertyValues();</span><br><span class="line">            <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues.getPropertyValues()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> propertyValue.getName();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> propertyValue.getValue();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanReference) &#123;</span><br><span class="line">                    <span class="comment">// A 依赖 B，获取 B 的实例化</span></span><br><span class="line">                    <span class="type">BeanReference</span> <span class="variable">beanReference</span> <span class="operator">=</span> (BeanReference) value;</span><br><span class="line">                    value = getBean(beanReference.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 属性填充</span></span><br><span class="line">                BeanUtil.setFieldValue(bean, name, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Error setting property values：&quot;</span> + beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 执行 BeanPostProcessor Before 处理</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 待完成内容：invokeInitMethods(beanName, wrappedBean, beanDefinition);</span></span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, beanDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 执行 BeanPostProcessor After 处理</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">        <span class="keyword">return</span> wrappedBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeInitMethods</span><span class="params">(String beanName, Object wrappedBean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">current</span> <span class="operator">=</span> processor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == current) <span class="keyword">return</span> result;</span><br><span class="line">            result = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">current</span> <span class="operator">=</span> processor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == current) <span class="keyword">return</span> result;</span><br><span class="line">            result = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果：-2"><a href="#结果：-2" class="headerlink" title="结果："></a>结果：</h3><p>整个流程概括来讲核心就是 refresh() 方法。 </p><ol><li><p>首先通过 ClassPathXmlApplicationContext 上下文实现类入口，进入refresh()方法。</p></li><li><p>之后，创建BeanFactory，定义并注册Bean </p></li><li><p>获取到Beanfactory之后，执行定义的 BeanFactoryPostProcessor，以此修改Bean定义的属性信息。 </p></li><li><p>在此之后，将定义的 BeanPostProcessor 注册到容器中。 </p></li><li><p>最后，提前实例化Bean，由已经注册的 BeanPostProcessor 来修改 实例化后的Bean信息。 </p><p>Tips：BeanFactoryPostProcessor 和 BeanPostProcessor 本身也是 Bean。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/21 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建 BeanFactory，并加载 BeanDefinition</span></span><br><span class="line">        <span class="comment">// 1.1  ClassPathXmlApplicationContext -&gt;  getConfigLocations()</span></span><br><span class="line">        <span class="comment">// 1.2  AbstractXmlApplicationContext  -&gt;  loadBeanDefinitions(DefaultListableBeanFactory beanFactory)</span></span><br><span class="line">        <span class="comment">// 1.3  AbstractRefreshableApplicationContext  -&gt;  refreshBeanFactory()</span></span><br><span class="line">        refreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取 BeanFactory</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 在 Bean 实例化之前，执行 BeanFactoryPostProcessor (Invoke factory processors registered as beans in the context.)</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. BeanPostProcessor 需要提前于其他 Bean 对象实例化之前执行注册操作</span></span><br><span class="line">        registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 提前实例化单例Bean对象，方便之后使用</span></span><br><span class="line">        beanFactory.preInstantiateSingletons();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> ConfigurableListableBeanFactory <span class="title function_">getBeanFactory</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        Map&lt;String, BeanFactoryPostProcessor&gt; beanFactoryPostProcessorMap = beanFactory.getBeansOfType(BeanFactoryPostProcessor.class);</span><br><span class="line">        <span class="keyword">for</span> (BeanFactoryPostProcessor beanFactoryPostProcessor : beanFactoryPostProcessorMap.values()) &#123;</span><br><span class="line">            beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        Map&lt;String, BeanPostProcessor&gt; beanPostProcessorMap = beanFactory.getBeansOfType(BeanPostProcessor.class);</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : beanPostProcessorMap.values()) &#123;</span><br><span class="line">            beanFactory.addBeanPostProcessor(beanPostProcessor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getBeansOfType</span><span class="params">(Class&lt;T&gt; type)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBeansOfType(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getBeanDefinitionNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBeanDefinitionNames();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBean(name, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBean(name, requiredType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step06.drawio.png" alt="step06.drawio"></p><h2 id="Step07：扩展Bean实例化过程，增加初始化以及销毁方法"><a href="#Step07：扩展Bean实例化过程，增加初始化以及销毁方法" class="headerlink" title="Step07：扩展Bean实例化过程，增加初始化以及销毁方法"></a>Step07：扩展Bean实例化过程，增加初始化以及销毁方法</h2><h3 id="实现：-5"><a href="#实现：-5" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>定义初始化和销毁方法的接口，一般用来做一些参数的加载与销毁。比如接口暴露，数据库连接断开等。</p></li><li><p>新增Bean定义信息，初始化以及销毁方法名。供xml解析用。 </p></li><li><p>完善 AbstractAutowireCapableBeanFactory 中bean对象的初始化方法，主要分为 执行实现初始化接口的方法 以及 通过xml文件解析判断init-Method是否存在，之后执行反射调用 method.invoke(bean) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 执行 BeanPostProcessor Before 处理</span></span><br><span class="line">  <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 待完成内容：invokeInitMethods(beanName, wrappedBean, beanDefinition);</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    invokeInitMethods(beanName, wrappedBean, beanDefinition);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Invocation of init method of bean[&quot;</span> + beanName + <span class="string">&quot;] failed&quot;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 执行 BeanPostProcessor After 处理</span></span><br><span class="line">  wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">  <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeInitMethods</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1. 实现接口 InitializingBean</span></span><br><span class="line">  <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> InitializingBean) &#123;</span><br><span class="line">    ((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 注解配置 init-method &#123;判断是为了避免二次执行初始化&#125;</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">initMethodName</span> <span class="operator">=</span> beanDefinition.getInitMethodName();</span><br><span class="line">  <span class="keyword">if</span> (StrUtil.isNotEmpty(initMethodName) &amp;&amp; !(bean <span class="keyword">instanceof</span> InitializingBean)) &#123;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">initMethod</span> <span class="operator">=</span> beanDefinition.getBeanClass().getMethod(initMethodName);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == initMethod) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Could not find an init method named &#x27;&quot;</span> + initMethodName + <span class="string">&quot;&#x27; on bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    initMethod.invoke(bean);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义销毁方法适配器，提供 执行实现初始化接口的方法 以及 通过xml文件解析判断destroy-Method 是否存在 两种销毁方法，与初始化方法相似。这两种方法都是在AbstractApplicationContext 注册虚拟机勾子后，虚拟机关闭前执行的操作。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// 1. 实现接口 DisposableBean</span></span><br><span class="line">  <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> DisposableBean) &#123;</span><br><span class="line">    ((DisposableBean) bean).destroy();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 注解配置 destroy-method &#123;判断是为了避免二次执行销毁&#125;</span></span><br><span class="line">  <span class="keyword">if</span> (StrUtil.isNotEmpty(destroyMethodName) &amp;&amp; !(bean <span class="keyword">instanceof</span> DisposableBean &amp;&amp; <span class="string">&quot;destroy&quot;</span>.equals(<span class="built_in">this</span>.destroyMethodName))) &#123;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">destroyMethod</span> <span class="operator">=</span> bean.getClass().getMethod(destroyMethodName);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == destroyMethod) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Couldn&#x27;t find a destroy method named &#x27;&quot;</span> + destroyMethodName + <span class="string">&quot;&#x27; on bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    destroyMethod.invoke(bean);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完善 AbstractAutowireCapableBeanFactory ，在Bean实例化后，将销毁方法保存起来，方便后续调用。这里将销毁方法注册到 DefaultSingletonRegistry 的 Map<String,DisposableBean> 属性中。 </p></li><li><p>完善 DefaultSingletonRegistry ，增加 Map<String,DisposableBean> 销毁方法注册表 以及  destroySingletons() 执行注册表中的销毁方法。</p></li><li><p>在配置应用上下文 ConfigurableApplicationContext 中，定义 注册虚拟机勾子以及关闭的方法。</p></li><li><p>在 应用上下文抽象类 AbstractApplicationContext 实现注册虚拟机勾子(Runtime.getRuntime().addShutdownHook(new Thread(this::close)) ) 以及 关闭方法(getBeanFactory().destroySingletons())。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerShutdownHook</span><span class="params">()</span> &#123;</span><br><span class="line">  Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>::close));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">  getBeanFactory().destroySingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果：-3"><a href="#结果：-3" class="headerlink" title="结果："></a>结果：</h3><ol><li>InitializingBean 和 DisposableBean 也可是Bean。 容器中，万物皆可为Bean。 </li><li>一种有意思的接口实现方式： 当 A 继承 B ，实现 C 时，由 A 继承 的 B 来实现 C 的接口方法。</li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step07.drawio.png" alt="step07.drawio"></p><h2 id="Step08：Aware感知容器对象，实现自定义扩展框架"><a href="#Step08：Aware感知容器对象，实现自定义扩展框架" class="headerlink" title="Step08：Aware感知容器对象，实现自定义扩展框架"></a>Step08：Aware感知容器对象，实现自定义扩展框架</h2><h3 id="实现：-6"><a href="#实现：-6" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>定义标记接口Aware，其子类定义和实现感知容器中的对象，相当于一个入口，更好的统一了各个感知对象，也就减少了多余的判断。</p></li><li><p>新增BeanFactoryAware、BeanNameAware、BeanClassLoaderAware、ApplicationContextAware 接口 继承 Aware ，并定义对应的感知方法。 </p></li><li><p>由于不能直接在创建Bean时 直接获取到 ApplicationContext，故 定义 ApplicationContextAwareProcessor 实现 BeanPostProcessor，在其初始化前置方法中增加感知 ApplicationContext 的操作，再由   AbstractAutowireCapableBeanFactory .applyBeanPostProcessorsBeforeInitialization  去调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">  <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware)&#123;</span><br><span class="line">    ((ApplicationContextAware) bean).setApplicationContext(applicationContext);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 AbstractApplicationContext 的 refresh() 方法 中，在获取到 BeanFactory 之后，添加 ApplicationContextAwareProcessor ，让继承 ApplicationContextAware 的Bean对象都能感知到 所属的 ApplicationContext。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">  <span class="comment">// 1. 创建 BeanFactory，并加载 BeanDefinition</span></span><br><span class="line">  refreshBeanFactory();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 获取 BeanFactory</span></span><br><span class="line">  <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 添加 ApplicationContextAwareProcessor，让继承自 ApplicationContextAware 的 Bean 对象都能感知所属的 ApplicationContext</span></span><br><span class="line">  beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ApplicationContextAwareProcessor</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 在 Bean 实例化之前，执行 BeanFactoryPostProcessor (Invoke factory processors registered as beans in the context.)</span></span><br><span class="line">  invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. BeanPostProcessor 需要提前于其他 Bean 对象实例化之前执行注册操作</span></span><br><span class="line">  registerBeanPostProcessors(beanFactory);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 6. 提前实例化单例Bean对象</span></span><br><span class="line">  beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完善 AbstractAutowireCapableBeanFactory 的 initializeBean 方法，在Bean初始化之前，判断是否能感知，并执行其对应的感知方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 执行 BeanPostProcessor Before 处理</span></span><br><span class="line">  <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 待完成内容：invokeInitMethods(beanName, wrappedBean, beanDefinition);</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    invokeInitMethods(beanName, wrappedBean, beanDefinition);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Invocation of init method of bean[&quot;</span> + beanName + <span class="string">&quot;] failed&quot;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 执行 BeanPostProcessor After 处理</span></span><br><span class="line">  wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">  <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeInitMethods</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// invokeAwareMethods</span></span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanFactoryAware) &#123;</span><br><span class="line">        ((BeanFactoryAware) bean).setBeanFactory(<span class="built_in">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanClassLoaderAware)&#123;</span><br><span class="line">        ((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanNameAware) &#123;</span><br><span class="line">        ((BeanNameAware) bean).setBeanName(beanName);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1. 实现接口 InitializingBean</span></span><br><span class="line">  <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> InitializingBean) &#123;</span><br><span class="line">    ((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 注解配置 init-method &#123;判断是为了避免二次执行初始化&#125;</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">initMethodName</span> <span class="operator">=</span> beanDefinition.getInitMethodName();</span><br><span class="line">  <span class="keyword">if</span> (StrUtil.isNotEmpty(initMethodName) &amp;&amp; !(bean <span class="keyword">instanceof</span> InitializingBean)) &#123;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">initMethod</span> <span class="operator">=</span> beanDefinition.getBeanClass().getMethod(initMethodName);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == initMethod) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Could not find an init method named &#x27;&quot;</span> + initMethodName + <span class="string">&quot;&#x27; on bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    initMethod.invoke(bean);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果：-4"><a href="#结果：-4" class="headerlink" title="结果："></a>结果：</h3><ol><li>进一步了解和完善了Bean的生命周期。</li></ol><p><img src="../../../../Notes/Spring全家桶/images/step08.drawio.png" alt="step08-第 2 页.drawio"></p><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="Bean的生命周期"></p><h2 id="Step09：单例判断以及通过用户创建的FactoryBean实现复杂Bean对象的创建"><a href="#Step09：单例判断以及通过用户创建的FactoryBean实现复杂Bean对象的创建" class="headerlink" title="Step09：单例判断以及通过用户创建的FactoryBean实现复杂Bean对象的创建"></a>Step09：单例判断以及通过用户创建的FactoryBean实现复杂Bean对象的创建</h2><h3 id="实现：-7"><a href="#实现：-7" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>BeanDefinition 新增 作用范围 定义 scope ，并在 XmlBeanDefintionReader 新增 对 xml 文件中 scope 的解析，并填充到 BeanDefinition 的 scope 属性中。</p></li><li><p>在 AbstractAutowireCapableBeanFactory 的 createBean() 创建对象时，根据是否是 单例 和 原型 模式，判断是否存入内存中。且在 registerDisposableBeanIfNecessary 注册销毁方法时，非单例Bean不需要注册且执行销毁方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">createBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object[] args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    bean = createBeanInstance(beanDefinition, beanName, args);</span><br><span class="line">    applyPropertyValues(beanName, bean, beanDefinition);</span><br><span class="line">    <span class="comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法</span></span><br><span class="line">    bean = initializeBean(beanName,bean,beanDefinition);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiation of bean failed&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注册实现了 DisposableBean 接口的 Bean 对象</span></span><br><span class="line">  registerDisposableBeanIfNecessary(beanName,bean,beanDefinition);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断 SCOPE_SINGLETON、SCOPE_PROTOTYPE</span></span><br><span class="line">  <span class="keyword">if</span> (beanDefinition.isSingleton()) &#123;</span><br><span class="line">    addSingleton(beanName, bean);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerDisposableBeanIfNecessary</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 非 Singleton 类型的 Bean 不执行销毁方法，单例Bean只会初始化一次，使用完成之后代表整个程序也就执行完毕。而原型则不一定。</span></span><br><span class="line">  <span class="keyword">if</span> (!beanDefinition.isSingleton()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> DisposableBean || StrUtil.isNotEmpty(beanDefinition.getDestroyMethodName())) &#123;</span><br><span class="line">    registerDisposableBean(beanName, <span class="keyword">new</span> <span class="title class_">DisposableBeanAdapter</span>(bean, beanName,</span><br><span class="line">beanDefinition));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义 FactoryBean 接口 ，提供 获取对象 ， 获取对象类型 ，是否单例 三个方法。</p></li><li><p>定义 FactoryBeanRegistrySupport 抽象类 继承于 DefaultSingletonBeanRegistry ，提供对 FactoryBean 的 一系列注册操作： getCachedObjectForFactoryBean 获取缓存中的单例对象 ；getObjectFromFactoryBean 获取对象的逻辑操作，判断是否单例，若是单例则从缓存中获取，第一次获取则需存入缓存，若不是单例，则直接获取且不存入缓存。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/28 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FactoryBeanRegistrySupport</span> <span class="keyword">extends</span> <span class="title class_">DefaultSingletonBeanRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; factoryBeanObjectCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">getCachedObjectForFactoryBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="built_in">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">        <span class="keyword">return</span> (object != NULL_OBJECT ? object : <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">getObjectFromFactoryBean</span><span class="params">(FactoryBean factory, String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (factory.isSingleton()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="built_in">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line">                object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">                <span class="built_in">this</span>.factoryBeanObjectCache.put(beanName, (object != <span class="literal">null</span> ? object : NULL_OBJECT));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (object != NULL_OBJECT ? object : <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">doGetObjectFromFactoryBean</span><span class="params">(<span class="keyword">final</span> FactoryBean factory, <span class="keyword">final</span> String beanName)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> factory.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;FactoryBean threw exception on object[&quot;</span> + beanName + <span class="string">&quot;] creation&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>扩展 AbstractBeanFactory 创建对象逻辑，将 原本继承DefaultSingletonBeanRegistry 修改为 继承 FactoryBeanRegistrySupport，即在原来的基础上插入 一个逻辑块，这样即方便扩展也不影响原来的功能。新增 getObjectForBeanInstance(beanInstance,beanName) 方法 ，判断是否属于FactoryBean以及调用 getObjectFromFactoryBean 方法，判断是否能获取FactoryBean缓存中的对象。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> Object[] args)</span> &#123;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">sharedInstance</span> <span class="operator">=</span> getSingleton(name);</span><br><span class="line">  <span class="keyword">if</span> (sharedInstance != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果是 FactoryBean，则需要调用 FactoryBean.getObject</span></span><br><span class="line">    <span class="keyword">return</span> (T) getObjectForBeanInstance(sharedInstance, name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> getBeanDefinition(name);</span><br><span class="line">  <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> createBean(name, beanDefinition, args);</span><br><span class="line">  <span class="keyword">return</span> (T) getObjectForBeanInstance(bean, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">getObjectForBeanInstance</span><span class="params">(Object beanInstance, String beanName)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">    <span class="keyword">return</span> beanInstance;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> getCachedObjectForFactoryBean(beanName);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line">    FactoryBean&lt;?&gt; factoryBean = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">    object = getObjectFromFactoryBean(factoryBean, beanName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果：-5"><a href="#结果：-5" class="headerlink" title="结果："></a>结果：</h3><ol><li>非 Singleton 类型的 Bean 不执行销毁方法，单例Bean只会初始化一次，使用完成之后代表整个程序也就执行完毕。而其他类型则不一定。</li><li>FactoryBean 通常用于构造具有许多依赖项的复杂对象 。</li><li>FactoryBean的特殊之处在于它可以向容器中注册两个Bean，一个是它本身，一个是FactoryBean.getObject()方法返回值所代表的目标对象。本demo中只对目标对象做了获取，Spring源码中 通过 &amp; + BeanName 的形式 获取原生FactoryBean 对象 。</li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step09.drawio.png" alt="step09.drawio"></p><h2 id="Step10：在面向用户的应用上下文中设计事件"><a href="#Step10：在面向用户的应用上下文中设计事件" class="headerlink" title="Step10：在面向用户的应用上下文中设计事件"></a>Step10：在面向用户的应用上下文中设计事件</h2><h3 id="实现：-8"><a href="#实现：-8" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>定义 ApplicationEvent 抽象类，继承于java.util.EventObject,从而具备事件功能，所有的事件类都需要继承该类。</p></li><li><p>定义上下文中的 事件类 ApplicationContextEvent，继承于 ApplicationEvent ，并 新增 getApplicationContext() 获取事件来源 的方法，容器中的事件 以及 用户自定义的事件 都需继承该类。</p></li><li><p>定义 容器刷新 ContextRefreshedEvent 以及 容器关闭 ContextClosedEvent 事件类。</p></li><li><p>定义 ApplicationListener\<E extends ApplicationEvent> 事件监听器 泛型接口，提供 事件处理 的方法。 </p></li><li><p>定义 ApplicationEventMulticaster 事件处理器接口，提供 添加、删除事件监听器以及发布事件 的方法。</p></li><li><p>定义 AbstractApplicationEventMulticaster 抽象类， 实现ApplicationEventMulticaster 、BeanFactoryAware 接口，提取事件处理器中公用方法 添加、删除事件监听器 以及 感知 beanFactory 的方法 实现，并 新增 过滤监听器的方法：主要是通过 获取 监听器接口 的类型参数，并判断是否可以与 event  进行相互转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.context.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.utils.ClassUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/1 21:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationEventMulticaster</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventMulticaster</span>, BeanFactoryAware &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Set&lt;ApplicationListener&lt;ApplicationEvent&gt;&gt; applicationListeners = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> &#123;</span><br><span class="line">        applicationListeners.add((ApplicationListener&lt;ApplicationEvent&gt;) listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> &#123;</span><br><span class="line">        applicationListeners.remove(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return a Collection of ApplicationListeners matching the given</span></span><br><span class="line"><span class="comment">     * event type. Non-matching listeners get excluded early.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event the event to be propagated. Allows for excluding</span></span><br><span class="line"><span class="comment">     * non-matching listeners early, based on cached matching information.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a Collection of ApplicationListeners</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> cn.ray.springframework.context.ApplicationListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Collection&lt;ApplicationListener&gt; <span class="title function_">getApplicationListeners</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        LinkedList&lt;ApplicationListener&gt; allListeners = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ApplicationListener&lt;ApplicationEvent&gt; listener : applicationListeners) &#123;</span><br><span class="line">            <span class="keyword">if</span> (supportsEvent(listener, event)) allListeners.add(listener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allListeners;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听器是否对该事件感兴趣</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">supportsEvent</span><span class="params">(ApplicationListener&lt;ApplicationEvent&gt; applicationListener, ApplicationEvent event)</span> &#123;</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ApplicationListener</span>&gt; listenerClass = applicationListener.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照 CglibSubclassingInstantiationStrategy、SimpleInstantiationStrategy 不同的实例化类型，需要判断后获取目标 class</span></span><br><span class="line">        Class&lt;?&gt; targetClass = ClassUtil.isCglibProxyClass(listenerClass) ? listenerClass.getSuperclass() : listenerClass;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Class.getGenericInterfaces()  获取该目标对象直接实现的接口类型数组</span></span><br><span class="line">        <span class="comment">// ApplicationEvent</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericInterface</span> <span class="operator">=</span> targetClass.getGenericInterfaces()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// getActualTypeArguments() 获取表示此类型实际类型参数的 Type 对象的数组</span></span><br><span class="line">        <span class="comment">// 即 ApplicationEvent 实现的 具体事件类型</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">actualTypeArgument</span> <span class="operator">=</span> ((ParameterizedType) genericInterface).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> actualTypeArgument.getTypeName();</span><br><span class="line">        Class&lt;?&gt; eventClassName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            eventClassName = Class.forName(className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;wrong event class name: &quot;</span> + className);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判定此 eventClassName 对象所表示的类或接口与指定的 event.getClass() 参数所表示的类或接口是否相同，或是否是其父类或父接口。</span></span><br><span class="line">        <span class="comment">// isAssignableFrom是用来判断子类和父类的关系的，或者接口的实现类和接口的关系的，默认所有的类的终极父类都是Object。如果A.isAssignableFrom(B)结果是true，证明B可以转换成为A,也就是A可以由B转换而来。</span></span><br><span class="line">        <span class="keyword">return</span> eventClassName.isAssignableFrom(event.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义 SimpleApplicationEventMulticaster 类，继承于AbstractApplicationEventMulticaster 抽象类，提供 构造函数感知BeanFactory，并实现 ApplicationEventMulticaster 事件处理器中发布事件 的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.context.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.ApplicationListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/1 21:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleApplicationEventMulticaster</span> <span class="keyword">extends</span> <span class="title class_">AbstractApplicationEventMulticaster</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleApplicationEventMulticaster</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line">        setBeanFactory(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> ApplicationListener listener : getApplicationListeners(event)) &#123;</span><br><span class="line">            listener.onApplicationEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义 ApplicationEventPublisher 事件发布者接口，提供 事件的发布方法。</p></li><li><p>完善 AbstractApplicationContext，新增 publishEvent(ApplicationEvent) 发布事件方法，并在刷新容器 refresh()方法中 新增 注册事件发布者、添加事件监听器以及发布容器刷新事件 的动作，以及 完善 close() 方法，新增 发布容器关闭事件 的方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.event.ApplicationEventMulticaster;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.event.ContextClosedEvent;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.event.ContextRefreshedEvent;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.context.event.SimpleApplicationEventMulticaster;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/21 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</span> <span class="operator">=</span> <span class="string">&quot;applicationEventMulticaster&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventMulticaster applicationEventMulticaster;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建 BeanFactory，并加载 BeanDefinition</span></span><br><span class="line">        refreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取 BeanFactory</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 添加 ApplicationContextAwareProcessor，让继承自 ApplicationContextAware 的 Bean 对象都能感知所属的 ApplicationContext</span></span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ApplicationContextAwareProcessor</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 在 Bean 实例化之前，执行 BeanFactoryPostProcessor (Invoke factory processors registered as beans in the context.)</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. BeanPostProcessor 需要提前于其他 Bean 对象实例化之前执行注册操作</span></span><br><span class="line">        registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 注册事件发布者</span></span><br><span class="line">        initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 添加事件监听器</span></span><br><span class="line">        registerListeners();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8. 提前实例化单例Bean对象</span></span><br><span class="line">        beanFactory.preInstantiateSingletons();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9. 发布容器刷新完成事件</span></span><br><span class="line">        finishRefresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> ConfigurableListableBeanFactory <span class="title function_">getBeanFactory</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        Map&lt;String, BeanFactoryPostProcessor&gt; beanFactoryPostProcessorMap = beanFactory.getBeansOfType(BeanFactoryPostProcessor.class);</span><br><span class="line">        <span class="keyword">for</span> (BeanFactoryPostProcessor beanFactoryPostProcessor : beanFactoryPostProcessorMap.values()) &#123;</span><br><span class="line">            beanFactoryPostProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        Map&lt;String, BeanPostProcessor&gt; beanPostProcessorMap = beanFactory.getBeansOfType(BeanPostProcessor.class);</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : beanPostProcessorMap.values()) &#123;</span><br><span class="line">            beanFactory.addBeanPostProcessor(beanPostProcessor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initApplicationEventMulticaster</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">        applicationEventMulticaster = <span class="keyword">new</span> <span class="title class_">SimpleApplicationEventMulticaster</span>(beanFactory);</span><br><span class="line">        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, applicationEventMulticaster);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerListeners</span><span class="params">()</span> &#123;</span><br><span class="line">        Collection&lt;ApplicationListener&gt; applicationListeners = getBeansOfType(ApplicationListener.class).values();</span><br><span class="line">        <span class="keyword">for</span> (ApplicationListener listener : applicationListeners) &#123;</span><br><span class="line">            applicationEventMulticaster.addApplicationListener(listener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        applicationEventMulticaster.multicastEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">finishRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">        publishEvent(<span class="keyword">new</span> <span class="title class_">ContextRefreshedEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getBeansOfType</span><span class="params">(Class&lt;T&gt; type)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBeansOfType(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getBeanDefinitionNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBeanDefinitionNames();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBean(name, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBean(name, requiredType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerShutdownHook</span><span class="params">()</span> &#123;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>::close));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 发布容器关闭事件</span></span><br><span class="line">        publishEvent(<span class="keyword">new</span> <span class="title class_">ContextClosedEvent</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">        getBeanFactory().destroySingletons();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果：-6"><a href="#结果：-6" class="headerlink" title="结果："></a>结果：</h3><ol><li>过滤监听器主要是判定此 eventClassName 对象所表示的类或接口与指定的 event.getClass() 参数所表示的类或接口是否相同，或是否是其父类或父接口。 首先获取不同实例化对象的Class，Cglib代理类需要获取父类Class，普通的则不需要，在获取到Class之后通过提取接口 .getGenericInterfaces() 和对应的类型参数 .getActualTypeArguments() 以及eventClassName，最后与入参中的event进行 isAssignableFrom 判断。</li><li>isAssignableFrom是用来判断子类和父类的关系的，或者接口的实现类和接口的关系的，默认所有的类的终极父类都是Object。如果A.isAssignableFrom(B)结果是true，证明B可以转换成为A 即 B与A同类 或 A是B的父类。</li><li>IOC 阶段完成！</li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step10.drawio.png" alt="step10.drawio"></p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="Step11：基于JDK、Cglib动态代理实现AOP切面"><a href="#Step11：基于JDK、Cglib动态代理实现AOP切面" class="headerlink" title="Step11：基于JDK、Cglib动态代理实现AOP切面"></a>Step11：基于JDK、Cglib动态代理实现AOP切面</h2><h3 id="准备：-1"><a href="#准备：-1" class="headerlink" title="准备："></a>准备：</h3><ol><li><p>连接点(JoinPoint) ：程序执行过程中的任意位置。比如 方法执行、设置变量、抛出异常等。 </p></li><li><p>切入点(Pointcut) ：匹配连接点的表达式。一般是：一个具体的方法或者匹配多个方法。 </p><p>Tips：连接点范围比切入点大，切入点的方法一定是被增强的，即是切入点的方法一定是连接点的，但是连接点的方法不一定是切入点的，因为存在 连接点的方法 不被增强 的可能。 </p></li><li><p>通知(Advice) ：在切入点执行的操作，即共性功能，即拦截方法。</p></li><li><p>通知类 ：定义通知的类。</p></li><li><p>切面(Aspect) ：描述通知与切入点的关系。</p></li></ol><h3 id="实现：-9"><a href="#实现：-9" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>定义类过滤器 ClassFilter 接口以及方法匹配器 MethodMatcher 接口。分别提供 matches(Class&lt;?&gt; clazz) 检查表达式匹配范围内是否存在给定的目标类 以及 matches(Method method, Class&lt;? targetClass) 检查表达式匹配范围内是否存在给定的目标类的给定方法 的方法。</p></li><li><p>定义切入点 Pointcut 接口，提供获取 ClassFilter 以及 MethodMatcher 的方法。</p></li><li><p>定义切入点表达式类 AspectJExpressionPointcut ，实现 ClassFilter、MethodMatcher 以及 Pointcut 接口，利用 aspectj包 提供的表达式校验方法实现 匹配方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.aop.aspectj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.ClassFilter;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.MethodMatcher;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.PointCut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.weaver.tools.PointcutExpression;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.weaver.tools.PointcutParser;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.weaver.tools.PointcutPrimitive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/4 20:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectJExpressionPointcut</span> <span class="keyword">implements</span> <span class="title class_">PointCut</span>, ClassFilter, MethodMatcher &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;PointcutPrimitive&gt; SUPPORTED_PRIMITIVES = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;PointcutPrimitive&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SUPPORTED_PRIMITIVES.add(PointcutPrimitive.EXECUTION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PointcutExpression pointcutExpression;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AspectJExpressionPointcut</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">        <span class="type">PointcutParser</span> <span class="variable">pointcutParser</span> <span class="operator">=</span> PointcutParser.getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution(SUPPORTED_PRIMITIVES, <span class="built_in">this</span>.getClass().getClassLoader());</span><br><span class="line">        pointcutExpression = pointcutParser.parsePointcutExpression(expression);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pointcutExpression.couldMatchJoinPointsInType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pointcutExpression.matchesMethodExecution(method).alwaysMatches();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ClassFilter <span class="title function_">getClassFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodMatcher <span class="title function_">getMethodMatcher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义目标对象 TargetSource 类，通过构造函数的方式传入目标对象，并提供 获取目标对象及其实现接口列表 的方法。</p></li><li><p>定义 切面通知信息 AdvisedSupport 类，将 目标对象 TargetSource 、方法拦截器 MethodInterceptor、方法匹配器 MethodMatcher 进行包装。</p></li><li><p>定义标准接口 AopProxy ，用于统一JDK、Cglib实现类 获取代理类。</p></li><li><p>定义反射方法调用 ReflectiveMethodInvocation 类，将 目标对象、方法、入参 进行包装并提供一个直接反射调用的方法 method.invoke(target, arguments) 。</p></li><li><p>定义 JDK实现代理 JdkDynamicAopProxy 类，实现 AopProxy, InvocationHandler ，实现 getProxy() 获取代理类 以及 invoke(Object proxy, Method method, Object[] args) 反射调用方法。</p><ol><li>invoke 方法 主要处理匹配方法后，使用用户自定义的拦截器实现，做methodInterceptor.invoke(new ReflectiveMethodInvocation(advised.getTargetSource().getTarget(), method, args) 反射调用。</li><li>getProxy 方法 使用Proxy类的newProxyInstance方法来获取一个代理类实例。因为实现了 InvocationHandler，此时调用处理器为 this 。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.aop.framework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.AdvisedSupport;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/4 22:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkDynamicAopProxy</span> <span class="keyword">implements</span> <span class="title class_">AopProxy</span>, InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AdvisedSupport advised;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JdkDynamicAopProxy</span><span class="params">(AdvisedSupport advised)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.advised = advised;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),advised.getTargetSource().getTargetClass(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (advised.getMethodMatcher().matches(method, advised.getTargetSource().getTarget().getClass())) &#123;</span><br><span class="line">            <span class="type">MethodInterceptor</span> <span class="variable">methodInterceptor</span> <span class="operator">=</span> advised.getMethodInterceptor();</span><br><span class="line">            <span class="keyword">return</span> methodInterceptor.invoke(<span class="keyword">new</span> <span class="title class_">ReflectiveMethodInvocation</span>(advised.getTargetSource().getTarget(), method, args));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(advised.getTargetSource().getTarget(), args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义 Cglib实现代理 Cglib2AopProxy 类，实现 AopProxy 接口 ，主要通过 Enhancer 生成代理对象 实现 getProxy() 获取代理类 的方法。</p><ol><li>方法拦截 则是在 enhancer.setCallback() 中处理。这里定义了两个内部类，DynamicAdvisedInterceptor 和 CglibMethodInvocation 。</li><li>DynamicAdvisedInterceptor 实现 MethodInterceptor 接口，并实现 intercept(Object, Method, Object[] , MethodProxy) 接口 ，主要处理匹配方法后，使用用户自定义的拦截器实现，做advised.getMethodInterceptor().invoke(methodInvocation) 。</li><li>CglibMethodInvocation 则是继承了 ReflectiveMethodInvocation ，将 MethodProxy 也进行了包装，并且重写了 proceed() 方法 ： this.methodProxy.invoke(this.target, this.arguments) 。 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.aop.framework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.AdvisedSupport;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/4 22:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cglib2AopProxy</span> <span class="keyword">implements</span> <span class="title class_">AopProxy</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AdvisedSupport advised;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cglib2AopProxy</span><span class="params">(AdvisedSupport advised)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.advised = advised;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(advised.getTargetSource().getTarget().getClass());</span><br><span class="line">        enhancer.setInterfaces(advised.getTargetSource().getTargetClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">DynamicAdvisedInterceptor</span>(advised));</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DynamicAdvisedInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AdvisedSupport advised;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DynamicAdvisedInterceptor</span><span class="params">(AdvisedSupport advised)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.advised = advised;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="type">CglibMethodInvocation</span> <span class="variable">methodInvocation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibMethodInvocation</span>(advised.getTargetSource().getTarget(), method, objects, methodProxy);</span><br><span class="line">            <span class="keyword">if</span> (advised.getMethodMatcher().matches(method, advised.getTargetSource().getTarget().getClass())) &#123;</span><br><span class="line">                <span class="keyword">return</span> advised.getMethodInterceptor().invoke(methodInvocation);</span><br><span class="line">                <span class="comment">//return advised.getMethodInterceptor().invoke(new ReflectiveMethodInvocation(advised.getTargetSource().getTarget(), method, objects));</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> methodInvocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CglibMethodInvocation</span> <span class="keyword">extends</span> <span class="title class_">ReflectiveMethodInvocation</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> MethodProxy methodProxy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">CglibMethodInvocation</span><span class="params">(Object target, Method method, Object[] arguments, MethodProxy methodProxy)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(target, method, arguments);</span><br><span class="line">            <span class="built_in">this</span>.methodProxy = methodProxy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.methodProxy.invoke(<span class="built_in">this</span>.target, <span class="built_in">this</span>.arguments);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果：-7"><a href="#结果：-7" class="headerlink" title="结果："></a>结果：</h3><ol><li><p>方法拦截器 主要重写invoke方法，处理自定义的新增实现（通知）并进行反射调用放行。</p></li><li><p>整个流程大概就是 先在JDK或Cglib动态代理过程中，增加方法拦截器，通过切入点匹配范围判断是否使用拦截器进行反射调用，之后获取到代理类进行操作。 </p></li><li><p>不理解 9.3 中 为什么用到了 CglibMethodInvocation ，我自己试了一下直接new ReflectiveMethodInvocation 也能运行成功，耗时也更短。</p><p>具体区别可看以下两篇文章：</p><ul><li><a href="https://blog.csdn.net/psd0503/article/details/107116881">https://blog.csdn.net/psd0503/article/details/107116881</a></li><li><a href="https://www.cnblogs.com/xy7112/p/16400997.html">https://www.cnblogs.com/xy7112/p/16400997.html</a></li></ul></li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step11.drawio.png" alt="step11-第 3 页.drawio"></p><h2 id="Step12：利用-BeanPostProcessor-将AOP扩展到Bean的生命周期"><a href="#Step12：利用-BeanPostProcessor-将AOP扩展到Bean的生命周期" class="headerlink" title="Step12：利用 BeanPostProcessor 将AOP扩展到Bean的生命周期"></a>Step12：利用 BeanPostProcessor 将AOP扩展到Bean的生命周期</h2><h3 id="实现：-10"><a href="#实现：-10" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>定义 Advice通知 拦截器链。 </p><ol><li>定义 BeforeAdvice 接口继承于 Advice，用于归纳整理。</li><li>定义 MethodBeforeAdvice 接口继承于 BeforeAdvice ，并提供 before 在方法调用之前执行拦截方法 的操作，后续用户自定义拦截方法实现该接口即可。</li></ol></li><li><p>定义 MethodBeforeAdviceInterceptor 方法拦截器，实现 MethodInterceptor 接口，并 在其 invoke(MethodInvocation) 方法中 调用 MethodBeforeAdvice 的before 方法。 </p></li><li><p>定义 各级访问者。  </p><ol><li>定义 Advisor 通知访问者 接口，提供 获取通知 getAdvice 的方法。</li><li>定义 PointcutAdvisor 切入点访问者 ，实现 Advisor 通知访问者 接口，并提供 获取驱动这个通知的切入 getPointcut 的方法。</li><li>定义 AspectJExpressionPointcutAdvisor 切面访问者 类，实现 PointcutAdvisor 切入点访问者  ， 并实现 获取通知 、 获取切面 的方法，将 切面  AspectJExpressionPointcut ，通知 Advice 以及 具体的拦截表达式 进行包装在一起，后续就可配置 XML文件 将其注入容器中，以供后续使用。 </li></ol></li><li><p>定义 ProxyFacotry 代理工厂，通过 AdvisedSupport 提供的配置信息 选择指定代理方式 返回代理对象。 </p></li><li><p>定义 InstantiationAwareBeanPostProcessor 接口，该接口继承于 BeanPostProcessor，可以认为是 扩展 BeanPostProcessor 的层次接口，提供了 在Bean实例化之前的操作 方法。 </p></li><li><p>定义 DefaultAdvisorAutoProxyCreator 自动代理创建者，实现 InstantiationAwareBeanPostProcessor、BeanFactoryAware 接口，使其可以优先注册并在初始化前感知容器中的BeanFactory，在之后通过BeanFactory获取 注册的 切面访问者 AspectJExpressionPointcutAdvisor，然后通过 切面访问者 进行配置 AdvisedSupport ，最终return new ProxyFactory(advisedSupport).getProxy() 返回 代理工厂生成的代理对象。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.aop.framework.autoproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.*;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.framework.ProxyFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.aop.Advice;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/6 20:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span>,InstantiationAwareBeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = (DefaultListableBeanFactory) beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isInfrastructureClass</span><span class="params">(Class&lt;?&gt; beanClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Advice.class.isAssignableFrom(beanClass) || Pointcut.class.isAssignableFrom(beanClass) || Advisor.class.isAssignableFrom(beanClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (isInfrastructureClass(beanClass)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        Collection&lt;AspectJExpressionPointcutAdvisor&gt; advisors = beanFactory.getBeansOfType(AspectJExpressionPointcutAdvisor.class).values();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (AspectJExpressionPointcutAdvisor advisor : advisors) &#123;</span><br><span class="line">            <span class="type">ClassFilter</span> <span class="variable">classFilter</span> <span class="operator">=</span> advisor.getPointcut().getClassFilter();</span><br><span class="line">            <span class="keyword">if</span> (!classFilter.matches(beanClass)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">TargetSource</span> <span class="variable">targetSource</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                targetSource = <span class="keyword">new</span> <span class="title class_">TargetSource</span>(beanClass.getDeclaredConstructor().newInstance());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            advisedSupport.setTargetSource(targetSource);</span><br><span class="line">            advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());</span><br><span class="line">            advisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());</span><br><span class="line">            advisedSupport.setProxyTargetClass(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(advisedSupport).getProxy();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完善 AbstractAutowireCapableBeanFactory 的 createBean 方法，在 Bean实例化之前，判断 是否返回代理对象 ，即 实例化之前的BeanPostProcessor 即InstantiationAwareBeanPostProcessor 是否存在。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValue;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.*;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/15 17:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">AutowireCapableBeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">InstantiationStrategy</span> <span class="variable">instantiationStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InstantiationStrategy <span class="title function_">getInstantiationStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instantiationStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInstantiationStrategy</span><span class="params">(InstantiationStrategy instantiationStrategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.instantiationStrategy = instantiationStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object[] args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断是否返回代理 Bean 对象</span></span><br><span class="line">            bean = resolveBeforeInstantiation(beanName, beanDefinition);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != bean) &#123;</span><br><span class="line">                <span class="keyword">return</span> bean;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 实例化bean</span></span><br><span class="line">            bean = createBeanInstance(beanDefinition, beanName, args);</span><br><span class="line">            <span class="comment">// 填充属性</span></span><br><span class="line">            applyPropertyValues(beanName, bean, beanDefinition);</span><br><span class="line">            <span class="comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法</span></span><br><span class="line">            bean = initializeBean(beanName,bean,beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiation of bean failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册实现了 DisposableBean 接口的 Bean 对象</span></span><br><span class="line">        registerDisposableBeanIfNecessary(beanName,bean,beanDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断 SCOPE_SINGLETON、SCOPE_PROTOTYPE</span></span><br><span class="line">        <span class="keyword">if</span> (beanDefinition.isSingleton()) &#123;</span><br><span class="line">            registerSingleton(beanName, bean);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">resolveBeforeInstantiation</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> applyBeanPostProcessorsBeforeInstantiation(beanDefinition.getBeanClass(), beanName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != bean) &#123;</span><br><span class="line">            bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanPostProcessor <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> ((InstantiationAwareBeanPostProcessor) beanPostProcessor).postProcessBeforeInstantiation(beanClass, beanName);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != result) <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerDisposableBeanIfNecessary</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非 Singleton 类型的 Bean 不执行销毁方法，单例Bean只会初始化一次，使用完成之后代表整个程序也就执行完毕。而原型则不一定。</span></span><br><span class="line">        <span class="keyword">if</span> (!beanDefinition.isSingleton()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> DisposableBean || StrUtil.isNotEmpty(beanDefinition.getDestroyMethodName())) &#123;</span><br><span class="line">            registerDisposableBean(beanName, <span class="keyword">new</span> <span class="title class_">DisposableBeanAdapter</span>(bean, beanName, beanDefinition));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createBeanInstance</span><span class="params">(BeanDefinition beanDefinition, String beanName, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructorToUse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = beanClass.getDeclaredConstructors(); <span class="comment">// 获取构造函数的个数</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor ctor : declaredConstructors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != args &amp;&amp; ctor.getParameterTypes().length == args.length) &#123; <span class="comment">// 简单比对入参个数</span></span><br><span class="line">                constructorToUse = ctor;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getInstantiationStrategy().instantiate(beanDefinition, beanName, constructorToUse, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bean 属性填充</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyPropertyValues</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> beanDefinition.getPropertyValues();</span><br><span class="line">            <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues.getPropertyValues()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> propertyValue.getName();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> propertyValue.getValue();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanReference) &#123;</span><br><span class="line">                    <span class="comment">// A 依赖 B，获取 B 的实例化</span></span><br><span class="line">                    <span class="type">BeanReference</span> <span class="variable">beanReference</span> <span class="operator">=</span> (BeanReference) value;</span><br><span class="line">                    value = getBean(beanReference.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 属性填充</span></span><br><span class="line">                BeanUtil.setFieldValue(bean, name, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Error setting property values：&quot;</span> + beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// invokeAwareMethods</span></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanFactoryAware) &#123;</span><br><span class="line">                ((BeanFactoryAware) bean).setBeanFactory(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanClassLoaderAware)&#123;</span><br><span class="line">                ((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanNameAware) &#123;</span><br><span class="line">                ((BeanNameAware) bean).setBeanName(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 执行 BeanPostProcessor Before 处理</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 待完成内容：invokeInitMethods(beanName, wrappedBean, beanDefinition);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            invokeInitMethods(beanName, wrappedBean, beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Invocation of init method of bean[&quot;</span> + beanName + <span class="string">&quot;] failed&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 执行 BeanPostProcessor After 处理</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">        <span class="keyword">return</span> wrappedBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeInitMethods</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 实现接口 InitializingBean</span></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> InitializingBean) &#123;</span><br><span class="line">            ((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 注解配置 init-method &#123;判断是为了避免二次执行初始化&#125;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">initMethodName</span> <span class="operator">=</span> beanDefinition.getInitMethodName();</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(initMethodName) &amp;&amp; !(bean <span class="keyword">instanceof</span> InitializingBean)) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">initMethod</span> <span class="operator">=</span> beanDefinition.getBeanClass().getMethod(initMethodName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == initMethod) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Could not find an init method named &#x27;&quot;</span> + initMethodName + <span class="string">&quot;&#x27; on bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            initMethod.invoke(bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">current</span> <span class="operator">=</span> processor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == current) <span class="keyword">return</span> result;</span><br><span class="line">            result = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">current</span> <span class="operator">=</span> processor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == current) <span class="keyword">return</span> result;</span><br><span class="line">            result = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果：-8"><a href="#结果：-8" class="headerlink" title="结果："></a>结果：</h3><p>融入思路： </p><ol><li>通过XML文件加载 DefaultAdvisorAutoProxyCreator 、MethodBeforeAdviceInterceptor 、 AspectJExpressionPointcutAdvisor 以及 用户自定义的拦截方法。 </li><li>在 AbstractApplicationContext 刷新上下文中 提前注册 DefaultAdvisorAutoProxyCreator 以便后续的代理操作。</li><li>DefaultAdvisorAutoProxyCreator.postProcessBeforeInstantiation(beanClass, beanName) 中 主要提供AspectJExpressionPointcutAdvisor 切面访问者 的处理，通过 表达式匹配 matches 、包装目标类 TargetSource、配置 AdvisedSupport、新建代理工厂 ProxyFactory(AdvisedSupport)  返回 代理对象。</li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step12.drawio.png" alt="step12-第 3 页.drawio"></p><h2 id="Step13：利用-自定义注解-实现Bean的自动化扫描注册"><a href="#Step13：利用-自定义注解-实现Bean的自动化扫描注册" class="headerlink" title="Step13：利用 自定义注解 实现Bean的自动化扫描注册"></a>Step13：利用 自定义注解 实现Bean的自动化扫描注册</h2><h3 id="实现：-11"><a href="#实现：-11" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>定义拦截注解</p><ol><li>定义 @Scope 注解，用于标记Bean对象的作用域。</li><li>定义 @Component 注解，用于标记是否为注册Bean，提供 value 属性指定BeanName。</li></ol></li><li><p>处理对象扫描装配</p><ol><li><p>定义 ClassPathScanningCandidateComponentProvider 类，具有 findCandidateComponents(String basePackage) 扫描并获取指定包下的所有@Component注解下的BeanDefinition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathScanningCandidateComponentProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;BeanDefinition&gt; <span class="title function_">findCandidateComponents</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; classes = ClassUtil.scanPackageByAnnotation(basePackage, Component.class);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">            candidates.add(<span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(clazz));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义 ClassPathBeanDefinitionScanner 扫描包处理类，继承于ClassPathScanningCandidateComponentProvider ，具有 doScan(String… basePackage) 扫描处理方法，主要用于 扫描多个包下的BeanDefinition，之后通过 自定义注解 @Scope 以及 @Component 获取并配置其作用域和BeanName进行注册。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathBeanDefinitionScanner</span> <span class="keyword">extends</span> <span class="title class_">ClassPathScanningCandidateComponentProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanDefinitionRegistry registry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathBeanDefinitionScanner</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.registry = registry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doScan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">            Set&lt;BeanDefinition&gt; beanDefinitions = findCandidateComponents(basePackage);</span><br><span class="line">            <span class="keyword">for</span> (BeanDefinition beanDefinition : beanDefinitions) &#123;</span><br><span class="line">                <span class="comment">// 解析 Bean 的作用域 singleton、prototype</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">beanScope</span> <span class="operator">=</span> resolveBeanScope(beanDefinition);</span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isNotEmpty(beanScope)) &#123;</span><br><span class="line">                    beanDefinition.setScope(beanScope);</span><br><span class="line">                &#125;</span><br><span class="line">                registry.registerBeanDefinition(determineBeanName(beanDefinition), beanDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">resolveBeanScope</span><span class="params">(BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        <span class="type">Scope</span> <span class="variable">scope</span> <span class="operator">=</span> beanClass.getAnnotation(Scope.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != scope) <span class="keyword">return</span> scope.value();</span><br><span class="line">        <span class="keyword">return</span> StrUtil.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置 beanName</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">determineBeanName</span><span class="params">(BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        <span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> beanClass.getAnnotation(Component.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> component.value();</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isEmpty(value)) &#123;</span><br><span class="line">            <span class="comment">// 首字母小写</span></span><br><span class="line">            value = StrUtil.lowerFirst(beanClass.getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>完善 XmlBeanDefinitionReader ，在 doLoadBeanDefinitions 解析注册操作 中新增对 context:component-scan 标签的解析，之后调用ClassPathBeanDefinitionScanner.doScan 方法进行Bean注册操作。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doLoadBeanDefinitions</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> ClassNotFoundException, DocumentException &#123;</span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(inputStream);</span><br><span class="line">        <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析 context:component-scan 标签，扫描包中的类并提取相关信息，用于组装 BeanDefinition</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">componentScan</span> <span class="operator">=</span> root.element(<span class="string">&quot;component-scan&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != componentScan) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">scanPath</span> <span class="operator">=</span> componentScan.attributeValue(<span class="string">&quot;base-package&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isEmpty(scanPath)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;The value of base-package attribute can not be empty or null&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            scanPackage(scanPath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Element&gt; beanList = root.elements(<span class="string">&quot;bean&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element bean : beanList) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> bean.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> bean.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> bean.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">initMethod</span> <span class="operator">=</span> bean.attributeValue(<span class="string">&quot;init-method&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">destroyMethodName</span> <span class="operator">=</span> bean.attributeValue(<span class="string">&quot;destroy-method&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">beanScope</span> <span class="operator">=</span> bean.attributeValue(<span class="string">&quot;scope&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 Class，方便获取类中的名称</span></span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">            <span class="comment">// 优先级 id &gt; name</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> StrUtil.isNotEmpty(id) ? id : name;</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isEmpty(beanName)) &#123;</span><br><span class="line">                beanName = StrUtil.lowerFirst(clazz.getSimpleName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义Bean</span></span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(clazz);</span><br><span class="line">            beanDefinition.setInitMethodName(initMethod);</span><br><span class="line">            beanDefinition.setDestroyMethodName(destroyMethodName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotEmpty(beanScope)) &#123;</span><br><span class="line">                beanDefinition.setScope(beanScope);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            List&lt;Element&gt; propertyList = bean.elements(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">            <span class="comment">// 读取属性并填充</span></span><br><span class="line">            <span class="keyword">for</span> (Element property : propertyList) &#123;</span><br><span class="line">                <span class="comment">// 解析标签：property</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> property.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">attrValue</span> <span class="operator">=</span> property.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">attrRef</span> <span class="operator">=</span> property.attributeValue(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                <span class="comment">// 获取属性值：引入对象、值对象</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> StrUtil.isNotEmpty(attrRef) ? <span class="keyword">new</span> <span class="title class_">BeanReference</span>(attrRef) : attrValue;</span><br><span class="line">                <span class="comment">// 创建属性信息</span></span><br><span class="line">                <span class="type">PropertyValue</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyValue</span>(attrName, value);</span><br><span class="line">                beanDefinition.getPropertyValues().addPropertyValue(propertyValue);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (getRegistry().containsBeanDefinition(beanName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Duplicate beanName[&quot;</span> + beanName + <span class="string">&quot;] is not allowed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 注册 BeanDefinition</span></span><br><span class="line">            getRegistry().registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scanPackage</span><span class="params">(String scanPath)</span> &#123;</span><br><span class="line">        String[] basePackages = StrUtil.splitToArray(scanPath, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(getRegistry());</span><br><span class="line">        scanner.doScan(basePackages);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="扩展：利用-BeanFactoryPostProcessor-进行占位符配置（-xxx-）"><a href="#扩展：利用-BeanFactoryPostProcessor-进行占位符配置（-xxx-）" class="headerlink" title="扩展：利用 BeanFactoryPostProcessor 进行占位符配置（${ xxx }）"></a>扩展：利用 BeanFactoryPostProcessor 进行占位符配置（${ xxx }）</h3><ol><li><p>定义 PropertyPlaceholderConfigurer 配置类，实现 BeanFactoryPostProcessor 接口，在其 postProcessBeanFactory 方法下，处理占位符配置，首先获取 所有BeanDefinition 具有指定前后缀即形如 ${key} 的 Bean属性，之后解析指定路径下的 properties 配置文件中相同 key 的值，通过 replace 字符串替换，将 BeanDefinition 属性值 变为 配置文件中对应 key 的值。最后通过propertyValues.addPropertyValue(new PropertyValue(propertyValue.getName(), buffer.toString())); 进行Bean属性信息的替换。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 加载属性文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DefaultResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultResourceLoader</span>();</span><br><span class="line">            <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(location);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(resource.getInputStream());</span><br><span class="line"></span><br><span class="line">            String[] beanDefinitionNames = beanFactory.getBeanDefinitionNames();</span><br><span class="line">            <span class="keyword">for</span> (String beanName : beanDefinitionNames) &#123;</span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> beanFactory.getBeanDefinition(beanName);</span><br><span class="line"></span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> beanDefinition.getPropertyValues();</span><br><span class="line">                <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues.getPropertyValues()) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> propertyValue.getValue();</span><br><span class="line">                    <span class="keyword">if</span> (!(value <span class="keyword">instanceof</span> String)) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="comment">// bean 定义的value</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">strVal</span> <span class="operator">=</span> (String) value;</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(strVal);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">startIdx</span> <span class="operator">=</span> strVal.indexOf(DEFAULT_PLACEHOLDER_PREFIX);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">stopIdx</span> <span class="operator">=</span> strVal.indexOf(DEFAULT_PLACEHOLDER_SUFFIX);</span><br><span class="line">                    <span class="comment">// 如果存在占位符，从配置文件中提取属性并替换bean定义</span></span><br><span class="line">                    <span class="keyword">if</span> (startIdx != -<span class="number">1</span> &amp;&amp; stopIdx != -<span class="number">1</span> &amp;&amp; startIdx &lt; stopIdx) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">propKey</span> <span class="operator">=</span> strVal.substring(startIdx + <span class="number">2</span>, stopIdx);</span><br><span class="line">                        <span class="comment">// 从配置文件中 拿到指定 key 的 value</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">propVal</span> <span class="operator">=</span> properties.getProperty(propKey);</span><br><span class="line">                        <span class="comment">// 替换</span></span><br><span class="line">                        buffer.replace(startIdx, stopIdx + <span class="number">1</span>, propVal);</span><br><span class="line">                        propertyValues.addPropertyValue(<span class="keyword">new</span> <span class="title class_">PropertyValue</span>(propertyValue.getName(), buffer.toString()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Could not load properties&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果：-9"><a href="#结果：-9" class="headerlink" title="结果："></a>结果：</h3><ol><li>经过这几章AOP的学习，对 整个Spring的扩展有了一定的了解，本质上就是在 完善 Bean的生命周期，使得整个Spring的功能使用更加方便快捷。</li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step13.drawio.png" alt="step13-第 2 页.drawio"></p><h2 id="Step14：利用-BeanPostProcessor-实现Bean属性的注解注入"><a href="#Step14：利用-BeanPostProcessor-实现Bean属性的注解注入" class="headerlink" title="Step14：利用 BeanPostProcessor 实现Bean属性的注解注入"></a>Step14：利用 BeanPostProcessor 实现Bean属性的注解注入</h2><h3 id="实现：-12"><a href="#实现：-12" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>定义属性注入相关注解</p><ol><li>定义 @Autowired 注解，用于标记Bean注入的依赖对象。</li><li>定义 @Qualifier 注解，用于标记Bean注入的依赖对象的具体名字。提供 value 属性指定 具体的beanName 1.3 定义 @Value 注解，用于标记Bean注入的属性，提供 value 属性指定  bean具体属性值，可以是占位符，也可以是普通值。</li></ol></li><li><p>向容器中添加字符串解析器，用于解析 @Value 注解。</p><ol><li><p>定义 StringValueResolver 字符串解析 接口，提供 resolveStringValue(String)  解析指定字符串 的方法。 </p></li><li><p>完善 ConfigurableBeanFactory 工厂配置化接口，新增 addEmbeddedValueResolver(StringValueResolver) 添加字符串解析器 以及  resolveEmbeddedValue(String) 解析指定字符串 的方法。 </p></li><li><p>完善 AbstractBeanFactory ，实现 ConfigurableBeanFactory 新增的  添加字符串解析器 以及 解析指定字符串 的方法。</p></li><li><p>完善 PropertyPlaceholderConfigurer 配置类，新增 PlaceholderResolvingStringValueResolver 内部类，实现 StringValueResolver 接口 的 resolveStringValue(String) 方法 。该配置类利用 BeanFactoryPostProcessor 在Bean定义加载完之后执行的特点，在处理完 XML 文件的 属性之后，将其 解析操作 通过 PlaceholderResolvingStringValueResolver 内部类 封装，并通过 beanFactory.addEmbeddedValueResolver(StringValueResolver) 添加 字符串解析器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValue;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanDefinition;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.utils.StringValueResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/11 20:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyPlaceholderConfigurer</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default placeholder prefix: &#123;<span class="doctag">@value</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_PLACEHOLDER_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;$&#123;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default placeholder suffix: &#123;<span class="doctag">@value</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_PLACEHOLDER_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocation</span><span class="params">(String location)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载属性文件</span></span><br><span class="line">            <span class="type">DefaultResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultResourceLoader</span>();</span><br><span class="line">            <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(location);</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(resource.getInputStream());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 占位符替换属性值</span></span><br><span class="line">            String[] beanDefinitionNames = beanFactory.getBeanDefinitionNames();</span><br><span class="line">            <span class="keyword">for</span> (String beanName : beanDefinitionNames) &#123;</span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> beanFactory.getBeanDefinition(beanName);</span><br><span class="line"></span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> beanDefinition.getPropertyValues();</span><br><span class="line">                <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues.getPropertyValues()) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> propertyValue.getValue();</span><br><span class="line">                    <span class="keyword">if</span> (!(value <span class="keyword">instanceof</span> String)) <span class="keyword">continue</span>;</span><br><span class="line">                    value = resolvePlaceholder((String) value,properties);</span><br><span class="line">                    propertyValues.addPropertyValue(<span class="keyword">new</span> <span class="title class_">PropertyValue</span>(propertyValue.getName(),value));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向容器中添加字符串解析器，供解析@Value注解使用</span></span><br><span class="line">            <span class="type">StringValueResolver</span> <span class="variable">stringValueResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PlaceholderResolvingStringValueResolver</span>(properties);</span><br><span class="line">            beanFactory.addEmbeddedValueResolver(stringValueResolver);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Could not load properties&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 占位符替换属性值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value bean属性定义的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties 配置文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 配置文件中 指定 key 的 value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">resolvePlaceholder</span><span class="params">(String value, Properties properties)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strVal</span> <span class="operator">=</span> value;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(strVal);</span><br><span class="line">        <span class="type">int</span> <span class="variable">startIdx</span> <span class="operator">=</span> strVal.indexOf(DEFAULT_PLACEHOLDER_PREFIX);</span><br><span class="line">        <span class="type">int</span> <span class="variable">stopIdx</span> <span class="operator">=</span> strVal.indexOf(DEFAULT_PLACEHOLDER_SUFFIX);</span><br><span class="line">        <span class="comment">// 如果存在占位符，从配置文件中提取属性值</span></span><br><span class="line">        <span class="keyword">if</span> (startIdx != -<span class="number">1</span> &amp;&amp; stopIdx != -<span class="number">1</span> &amp;&amp; startIdx &lt; stopIdx) &#123;</span><br><span class="line">            <span class="comment">// 占位符中 的 key</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">propKey</span> <span class="operator">=</span> strVal.substring(startIdx + <span class="number">2</span>, stopIdx);</span><br><span class="line">            <span class="comment">// 从配置文件中 拿到指定 key 的 value</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">propVal</span> <span class="operator">=</span> properties.getProperty(propKey);</span><br><span class="line">            buffer.replace(startIdx, stopIdx + <span class="number">1</span>, propVal);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">PlaceholderResolvingStringValueResolver</span> <span class="keyword">implements</span> <span class="title class_">StringValueResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Properties properties;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">PlaceholderResolvingStringValueResolver</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.properties = properties;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">resolveStringValue</span><span class="params">(String strVal)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> PropertyPlaceholderConfigurer.<span class="built_in">this</span>.resolvePlaceholder(strVal, properties);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>解析自定义注解</p><ol><li><p>完善 InstantiationAwareBeanPostProcessor 接口，新增 postProcessPropertyValues 在填充属性之前执行的方法。</p></li><li><p>定义 AutowiredAnnotationBeanPostProcessor 类，实现 InstantiationAwareBeanPostProcessor, BeanFactoryAware 接口，在实现的 postProcessPropertyValues 方法中，通过 获取 beanClass的Field，扫描并解析其@Value 注解【 beanFactory.resolveEmbeddedValue(value) 】设置其属性值     BeanUtil.setFieldValue(bean, field.getName(), value)  ，扫描 @Autowired 以及 @Qualifier 并获取到 与 Field.Type 同类型 的 bean 设置其依赖对象 BeanUtil.setFieldValue(bean, field.getName(), dependentBean)  。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.beans.factory.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.utils.ClassUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/15 18:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutowiredAnnotationBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">InstantiationAwareBeanPostProcessor</span>, BeanFactoryAware &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = (ConfigurableListableBeanFactory) beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertyValues <span class="title function_">postProcessPropertyValues</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 1. 处理注解 @Value</span></span><br><span class="line">        Class&lt;?&gt; clazz = bean.getClass();</span><br><span class="line">        clazz = ClassUtil.isCglibProxyClass(clazz) ? clazz.getSuperclass() : clazz;</span><br><span class="line"></span><br><span class="line">        Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            <span class="type">Value</span> <span class="variable">valueAnnotation</span> <span class="operator">=</span> field.getAnnotation(Value.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != valueAnnotation) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> valueAnnotation.value();</span><br><span class="line">                value = beanFactory.resolveEmbeddedValue(value);</span><br><span class="line">                BeanUtil.setFieldValue(bean, field.getName(), value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 处理注解 @Autowired</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            <span class="type">Autowired</span> <span class="variable">autowiredAnnotation</span> <span class="operator">=</span> field.getAnnotation(Autowired.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != autowiredAnnotation) &#123;</span><br><span class="line">                Class&lt;?&gt; fieldType = field.getType();</span><br><span class="line">                <span class="type">String</span> <span class="variable">dependentBeanName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">dependentBean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Qualifier</span> <span class="variable">qualifierAnnotation</span> <span class="operator">=</span> field.getAnnotation(Qualifier.class);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != qualifierAnnotation) &#123;</span><br><span class="line">                    dependentBeanName = qualifierAnnotation.value();</span><br><span class="line">                    dependentBean = beanFactory.getBean(dependentBeanName, fieldType);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dependentBean = beanFactory.getBean(fieldType);</span><br><span class="line">                &#125;</span><br><span class="line">                BeanUtil.setFieldValue(bean, field.getName(), dependentBean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 这里怎么获取到的 变化后的propertyValues ？</span></span><br><span class="line">      <span class="comment">// 似乎返回什么都不是重点，这里已经进行了属性填充。。。  BeanUtil.setFieldValue</span></span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>扩展 Bean的生命周期</p><ol><li><p>完善 AbstractAutowireCapableBeanFactory 的 createBean 方法，在 其填充Bean属性之前，检索是否存在 InstantiationAwareBeanPostProcessor，并调用其 postProcessPropertyValues 进行Bean属性的注解注入。 </p><p>Tips：postProcessPropertyValues 方法 调用后，可能还存在 无注解的属性值，因此需要进行判断 pvs 是否为空，并将其添加到 BeanDefinition 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">AutowireCapableBeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">  …………</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object[] args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断是否返回代理 Bean 对象</span></span><br><span class="line">            bean = resolveBeforeInstantiation(beanName, beanDefinition);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != bean) &#123;</span><br><span class="line">                <span class="keyword">return</span> bean;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 实例化bean</span></span><br><span class="line">            bean = createBeanInstance(beanDefinition, beanName, args);</span><br><span class="line">            <span class="comment">// 在填充 Bean 属性之前，允许 BeanPostProcessor 修改属性值</span></span><br><span class="line">            applyBeanPostProcessorsBeforeApplyingPropertyValues(beanName,bean,beanDefinition);</span><br><span class="line">            <span class="comment">// 填充属性</span></span><br><span class="line">            applyPropertyValues(beanName, bean, beanDefinition);</span><br><span class="line">            <span class="comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法</span></span><br><span class="line">            bean = initializeBean(beanName,bean,beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiation of bean failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册实现了 DisposableBean 接口的 Bean 对象</span></span><br><span class="line">        registerDisposableBeanIfNecessary(beanName,bean,beanDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断 SCOPE_SINGLETON、SCOPE_PROTOTYPE</span></span><br><span class="line">        <span class="keyword">if</span> (beanDefinition.isSingleton()) &#123;</span><br><span class="line">            registerSingleton(beanName, bean);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在设置 Bean 属性之前，允许 BeanPostProcessor 修改属性值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanDefinition</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyBeanPostProcessorsBeforeApplyingPropertyValues</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanPostProcessor <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor)&#123;</span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">pvs</span> <span class="operator">=</span> ((InstantiationAwareBeanPostProcessor) beanPostProcessor).postProcessPropertyValues(beanDefinition.getPropertyValues(), bean, beanName);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != pvs) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (PropertyValue propertyValue : pvs.getPropertyValues()) &#123;</span><br><span class="line">                        beanDefinition.getPropertyValues().addPropertyValue(propertyValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">………………</span><br></pre></td></tr></table></figure></li></ol></li><li><p>完善 ClassPathBeanDefinitionScanner 的 doScan 方法，在其注册 BeanDefinition 之后，注册 AutowiredAnnotationBeanPostProcessor ，就不用手动去配置 XML 文件了。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.context.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.BeanDefinition;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/11 21:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathBeanDefinitionScanner</span> <span class="keyword">extends</span> <span class="title class_">ClassPathScanningCandidateComponentProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanDefinitionRegistry registry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathBeanDefinitionScanner</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.registry = registry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doScan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">            Set&lt;BeanDefinition&gt; beanDefinitions = findCandidateComponents(basePackage);</span><br><span class="line">            <span class="keyword">for</span> (BeanDefinition beanDefinition : beanDefinitions) &#123;</span><br><span class="line">                <span class="comment">// 解析 Bean 的作用域 singleton、prototype</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">beanScope</span> <span class="operator">=</span> resolveBeanScope(beanDefinition);</span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isNotEmpty(beanScope)) &#123;</span><br><span class="line">                    beanDefinition.setScope(beanScope);</span><br><span class="line">                &#125;</span><br><span class="line">                registry.registerBeanDefinition(determineBeanName(beanDefinition), beanDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注册处理注解的 BeanPostProcessor（@Autowired、@Value）</span></span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;cn.ray.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(AutowiredAnnotationBeanPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">resolveBeanScope</span><span class="params">(BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        <span class="type">Scope</span> <span class="variable">scope</span> <span class="operator">=</span> beanClass.getAnnotation(Scope.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != scope) <span class="keyword">return</span> scope.value();</span><br><span class="line">        <span class="keyword">return</span> StrUtil.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置 beanName</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">determineBeanName</span><span class="params">(BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        <span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> beanClass.getAnnotation(Component.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> component.value();</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isEmpty(value)) &#123;</span><br><span class="line">            <span class="comment">// 首字母小写</span></span><br><span class="line">            value = StrUtil.lowerFirst(beanClass.getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果：-10"><a href="#结果：-10" class="headerlink" title="结果："></a>结果：</h3><ol><li>外部接口通过内部类去实现，体现了良好的封装性，也更好的将两个具有一定关联的类组织在了一起，解决了共同的逻辑操作。</li><li>接口用 instanceof 判断，父类或同类用 isAssignableFrom 判断，注解用 getAnnotation(Annotation.class) 这些都相当于在类上的一些标识信息，便于一些方法找到功能点，并对其进行处理。像 Spring 中多次用到的 BeanPostProcessor。</li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step14.drawio.png" alt="step15-第 2 页.drawio"></p><h2 id="Step15：调整-AOP-代理对象生成的时机-实现其属性注入"><a href="#Step15：调整-AOP-代理对象生成的时机-实现其属性注入" class="headerlink" title="Step15：调整 AOP 代理对象生成的时机 实现其属性注入"></a>Step15：调整 AOP 代理对象生成的时机 实现其属性注入</h2><h3 id="实现：-13"><a href="#实现：-13" class="headerlink" title="实现："></a>实现：</h3><p>之前 代理对象 的生成 是在 Bean对象创建之前，即不在 Bean 的生命周期，无法实现属性的注入，现在需要调整其生成时机，整个流程其实十分简单，迁移 之前 AOP代理方法 到 BeanPostProcessor 的 postProcessAfterInitialization 的方法，这样在 bean 属性注入并初始化之后，就会调用 其代理方法来完成 AOP 代理。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.aop.framework.autoproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.*;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.framework.ProxyFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.aop.Advice;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/6 20:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span>,InstantiationAwareBeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = (DefaultListableBeanFactory) beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isInfrastructureClass</span><span class="params">(Class&lt;?&gt; beanClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Advice.class.isAssignableFrom(beanClass) || Pointcut.class.isAssignableFrom(beanClass) || Advisor.class.isAssignableFrom(beanClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (isInfrastructureClass(bean.getClass())) <span class="keyword">return</span> bean;</span><br><span class="line"></span><br><span class="line">        Collection&lt;AspectJExpressionPointcutAdvisor&gt; advisors = beanFactory.getBeansOfType(AspectJExpressionPointcutAdvisor.class).values();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (AspectJExpressionPointcutAdvisor advisor : advisors) &#123;</span><br><span class="line">            <span class="type">ClassFilter</span> <span class="variable">classFilter</span> <span class="operator">=</span> advisor.getPointcut().getClassFilter();</span><br><span class="line">            <span class="keyword">if</span> (!classFilter.matches(bean.getClass())) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">TargetSource</span> <span class="variable">targetSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetSource</span>(bean);</span><br><span class="line">            advisedSupport.setTargetSource(targetSource);</span><br><span class="line">            advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());</span><br><span class="line">            advisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());</span><br><span class="line">            advisedSupport.setProxyTargetClass(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(advisedSupport).getProxy();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于判断实例化之后的对象是否已经属性填充</span></span><br><span class="line"><span class="comment">// 当前已生成填充属性之后的代理对象,故返回true</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertyValues <span class="title function_">postProcessPropertyValues</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Tip： 1. 因为此时 代理对象的生成 是在 Bean实例化之后，所以 DefaultAdvisorAutoProxyCreator 配置 TargetSource 需将 targetSource = new TargetSource(beanClass.getDeclaredConstructor().newInstance()); 修改为 targetSource = new TargetSource(bean);  ，否则将代理新的实例化对象，从而导致属性无法注入。</p></blockquote><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/createBean.png" alt="createBean"></p><h2 id="Step15：三级缓存处理循环依赖"><a href="#Step15：三级缓存处理循环依赖" class="headerlink" title="Step15：三级缓存处理循环依赖"></a>Step15：三级缓存处理循环依赖</h2><h3 id="实现：-14"><a href="#实现：-14" class="headerlink" title="实现："></a>实现：</h3><ol><li><p>定义 ObjectFactory 函数式接口，用于获取三级缓存 singletonFactories 的 代理对象。 </p></li><li><p>完善 DefaultSingletonBeanRegistry ，增加 singletonObjects 一级缓存，earlySingletonObjects 二级缓存，singletonFactories 三级缓存。并提供 getSingleton 获取有效缓存中的对象 ， registerSingleton 注册单例对象、addSingletonFactory 添加三级缓存 的方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.SingletonBeanRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Internal marker for a null singleton object:</span></span><br><span class="line"><span class="comment">     * used as marker value for concurrent Maps (which don&#x27;t support null values).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">NULL_OBJECT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一级缓存，普通对象</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cache of singleton objects: bean name --&gt; bean instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二级缓存，提前暴漏对象，没有完全实例化的对象</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cache of early singleton objects: bean name --&gt; bean instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三级缓存，存放代理对象</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cache of singleton factories: bean name --&gt; ObjectFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, ObjectFactory&lt;?&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, DisposableBean&gt; disposableBeans = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="comment">//  获取一级缓存中的对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> singletonObjects.get(beanName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == singletonObject) &#123;</span><br><span class="line">            singletonObject = earlySingletonObjects.get(beanName);</span><br><span class="line">            <span class="comment">// 判断二级缓存中是否有对象，这个对象就是代理对象，因为只有代理对象才会放到三级缓存中</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == singletonObject) &#123;</span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = singletonFactories.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    <span class="comment">// 把三级缓存中的代理对象中的真实对象获取出来，放入二级缓存中</span></span><br><span class="line">                    earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singletonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span> &#123;</span><br><span class="line">        singletonObjects.put(beanName, singletonObject);</span><br><span class="line">        earlySingletonObjects.remove(beanName);</span><br><span class="line">        singletonFactories.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addSingletonFactory</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.singletonObjects.containsKey(beanName)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.singletonFactories.put(beanName, singletonFactory);</span><br><span class="line">            <span class="built_in">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerDisposableBean</span><span class="params">(String beanName, DisposableBean bean)</span> &#123;</span><br><span class="line">        disposableBeans.put(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroySingletons</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;String&gt; keySet = <span class="built_in">this</span>.disposableBeans.keySet();</span><br><span class="line">        Object[] disposableBeanNames = keySet.toArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> disposableBeanNames.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">beanName</span> <span class="operator">=</span> disposableBeanNames[i];</span><br><span class="line">            <span class="type">DisposableBean</span> <span class="variable">disposableBean</span> <span class="operator">=</span> disposableBeans.remove(beanName);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                disposableBean.destroy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Destroy method on bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; threw an exception&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完善 InstantiationAwareBeanPostProcessor ，定义一个 default 普通方法 getEarlyBeanReference ，返回一个bean ， 并供 DefaultAdvisorAutoProxyCreator 实现。</p></li><li><p>完善 DefaultAdvisorAutoProxyCreator ，增加 earlyProxyReferences 列表，用于记录 原始对象 是否已经代理， 实现 InstantiationAwareBeanPostProcessor.getEarlyBeanReference 方法，生成代理对象并记录，修改 postProcessAfterInitialization 方法，判断 earlyProxyReferences 是否存在 当前对象，若存在，则表示已经 提前代理，则直接返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.aop.framework.autoproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.*;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.aop.framework.ProxyFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.support.DefaultListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.aop.Advice;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/6 20:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span>,InstantiationAwareBeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Object&gt; earlyProxyReferences = Collections.synchronizedSet(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = (DefaultListableBeanFactory) beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isInfrastructureClass</span><span class="params">(Class&lt;?&gt; beanClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Advice.class.isAssignableFrom(beanClass) || Pointcut.class.isAssignableFrom(beanClass) || Advisor.class.isAssignableFrom(beanClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!earlyProxyReferences.contains(beanName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> wrapIfNecessary(bean);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">wrapIfNecessary</span><span class="params">(Object bean)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isInfrastructureClass(bean.getClass())) <span class="keyword">return</span> bean;</span><br><span class="line"></span><br><span class="line">        Collection&lt;AspectJExpressionPointcutAdvisor&gt; advisors = beanFactory.getBeansOfType(AspectJExpressionPointcutAdvisor.class).values();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (AspectJExpressionPointcutAdvisor advisor : advisors) &#123;</span><br><span class="line">            <span class="type">ClassFilter</span> <span class="variable">classFilter</span> <span class="operator">=</span> advisor.getPointcut().getClassFilter();</span><br><span class="line">            <span class="keyword">if</span> (!classFilter.matches(bean.getClass())) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">TargetSource</span> <span class="variable">targetSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetSource</span>(bean);</span><br><span class="line">            advisedSupport.setTargetSource(targetSource);</span><br><span class="line">            advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());</span><br><span class="line">            advisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());</span><br><span class="line">            advisedSupport.setProxyTargetClass(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(advisedSupport).getProxy();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertyValues <span class="title function_">postProcessPropertyValues</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getEarlyBeanReference</span><span class="params">(Object bean, String beanName)</span> &#123;</span><br><span class="line">        earlyProxyReferences.add(beanName);</span><br><span class="line">        <span class="keyword">return</span> wrapIfNecessary(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完善 AbstractAutowireCapableBeanFactory ，在 createBean 实例化Bean之后添加三级缓存 addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, beanDefinition, finalBean));  ， 并在最后 判断单例 时，调用 getSingleton 根据实际情况返回对象，最终注入 一级缓存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ray.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValue;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.*;</span><br><span class="line"><span class="keyword">import</span> cn.ray.springframework.beans.factory.config.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> JOJO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/15 17:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">AutowireCapableBeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">InstantiationStrategy</span> <span class="variable">instantiationStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InstantiationStrategy <span class="title function_">getInstantiationStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instantiationStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInstantiationStrategy</span><span class="params">(InstantiationStrategy instantiationStrategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.instantiationStrategy = instantiationStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object[] args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 判断是否返回代理 Bean 对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> resolveBeforeInstantiation(beanName, beanDefinition);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != bean) &#123;</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> doCreateBean(beanName,beanDefinition,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化 Bean</span></span><br><span class="line">            bean = createBeanInstance(beanDefinition, beanName, args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理循环依赖，将实例化后的Bean对象提前放入缓存中暴露出来</span></span><br><span class="line">            <span class="keyword">if</span> (beanDefinition.isSingleton()) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">finalBean</span> <span class="operator">=</span> bean;</span><br><span class="line">                addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, beanDefinition, finalBean));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实例化后判断</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">continueWithPropertyPopulation</span> <span class="operator">=</span> applyBeanPostProcessorsAfterInstantiation(beanName, bean);</span><br><span class="line">            <span class="keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">                <span class="keyword">return</span> bean;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在设置 Bean 属性之前，允许 BeanPostProcessor 修改属性值</span></span><br><span class="line">            applyBeanPostProcessorsBeforeApplyingPropertyValues(beanName, bean, beanDefinition);</span><br><span class="line">            <span class="comment">// 给 Bean 填充属性</span></span><br><span class="line">            applyPropertyValues(beanName, bean, beanDefinition);</span><br><span class="line">            <span class="comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法</span></span><br><span class="line">            bean = initializeBean(beanName, bean, beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiation of bean failed&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册实现了 DisposableBean 接口的 Bean 对象</span></span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, beanDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断 SCOPE_SINGLETON、SCOPE_PROTOTYPE</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line">        <span class="keyword">if</span> (beanDefinition.isSingleton()) &#123;</span><br><span class="line">            <span class="comment">// 获取代理对象</span></span><br><span class="line">            exposedObject = getSingleton(beanName);</span><br><span class="line">            registerSingleton(beanName, exposedObject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exposedObject;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">getEarlyBeanReference</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object bean)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanPostProcessor <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                exposedObject = ((InstantiationAwareBeanPostProcessor) beanPostProcessor).getEarlyBeanReference(exposedObject, beanName);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == exposedObject) <span class="keyword">return</span> exposedObject;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exposedObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理对象或已配置过属性则不再执行之后的操作，直接返回bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">applyBeanPostProcessorsAfterInstantiation</span><span class="params">(String beanName, Object bean)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">continueWithPropertyPopulation</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanPostProcessor <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">instantiationAwareBeanPostProcessor</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor) beanPostProcessor;</span><br><span class="line">                <span class="keyword">if</span> (!instantiationAwareBeanPostProcessor.postProcessAfterInstantiation(bean, beanName)) &#123;</span><br><span class="line">                    continueWithPropertyPopulation = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> continueWithPropertyPopulation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在设置 Bean 属性之前，允许 BeanPostProcessor 修改属性值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanDefinition</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyBeanPostProcessorsBeforeApplyingPropertyValues</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanPostProcessor <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor)&#123;</span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">pvs</span> <span class="operator">=</span> ((InstantiationAwareBeanPostProcessor) beanPostProcessor).postProcessPropertyValues(beanDefinition.getPropertyValues(), bean, beanName);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != pvs) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (PropertyValue propertyValue : pvs.getPropertyValues()) &#123;</span><br><span class="line">                        beanDefinition.getPropertyValues().addPropertyValue(propertyValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">resolveBeforeInstantiation</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> applyBeanPostProcessorsBeforeInstantiation(beanDefinition.getBeanClass(), beanName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != bean) &#123;</span><br><span class="line">            bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (beanPostProcessor <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> ((InstantiationAwareBeanPostProcessor) beanPostProcessor).postProcessBeforeInstantiation(beanClass, beanName);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != result) <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerDisposableBeanIfNecessary</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非 Singleton 类型的 Bean 不执行销毁方法，单例Bean只会初始化一次，使用完成之后代表整个程序也就执行完毕。而原型则不一定。</span></span><br><span class="line">        <span class="keyword">if</span> (!beanDefinition.isSingleton()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> DisposableBean || StrUtil.isNotEmpty(beanDefinition.getDestroyMethodName())) &#123;</span><br><span class="line">            registerDisposableBean(beanName, <span class="keyword">new</span> <span class="title class_">DisposableBeanAdapter</span>(bean, beanName, beanDefinition));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createBeanInstance</span><span class="params">(BeanDefinition beanDefinition, String beanName, Object[] args)</span> &#123;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructorToUse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = beanClass.getDeclaredConstructors(); <span class="comment">// 获取构造函数的个数</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor ctor : declaredConstructors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != args &amp;&amp; ctor.getParameterTypes().length == args.length) &#123; <span class="comment">// 简单比对入参个数</span></span><br><span class="line">                constructorToUse = ctor;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getInstantiationStrategy().instantiate(beanDefinition, beanName, constructorToUse, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bean 属性填充</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyPropertyValues</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> beanDefinition.getPropertyValues();</span><br><span class="line">            <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues.getPropertyValues()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> propertyValue.getName();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> propertyValue.getValue();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanReference) &#123;</span><br><span class="line">                    <span class="comment">// A 依赖 B，获取 B 的实例化</span></span><br><span class="line">                    <span class="type">BeanReference</span> <span class="variable">beanReference</span> <span class="operator">=</span> (BeanReference) value;</span><br><span class="line">                    value = getBean(beanReference.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 属性填充</span></span><br><span class="line">                BeanUtil.setFieldValue(bean, name, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Error setting property values：&quot;</span> + beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// invokeAwareMethods</span></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanFactoryAware) &#123;</span><br><span class="line">                ((BeanFactoryAware) bean).setBeanFactory(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanClassLoaderAware)&#123;</span><br><span class="line">                ((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanNameAware) &#123;</span><br><span class="line">                ((BeanNameAware) bean).setBeanName(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 执行 BeanPostProcessor Before 处理</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 待完成内容：invokeInitMethods(beanName, wrappedBean, beanDefinition);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            invokeInitMethods(beanName, wrappedBean, beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Invocation of init method of bean[&quot;</span> + beanName + <span class="string">&quot;] failed&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 执行 BeanPostProcessor After 处理</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">        <span class="keyword">return</span> wrappedBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeInitMethods</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 实现接口 InitializingBean</span></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> InitializingBean) &#123;</span><br><span class="line">            ((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 注解配置 init-method &#123;判断是为了避免二次执行初始化&#125;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">initMethodName</span> <span class="operator">=</span> beanDefinition.getInitMethodName();</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotEmpty(initMethodName) &amp;&amp; !(bean <span class="keyword">instanceof</span> InitializingBean)) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">initMethod</span> <span class="operator">=</span> beanDefinition.getBeanClass().getMethod(initMethodName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == initMethod) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Could not find an init method named &#x27;&quot;</span> + initMethodName + <span class="string">&quot;&#x27; on bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            initMethod.invoke(bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">current</span> <span class="operator">=</span> processor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == current) <span class="keyword">return</span> result;</span><br><span class="line">            result = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor processor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">current</span> <span class="operator">=</span> processor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == current) <span class="keyword">return</span> result;</span><br><span class="line">            result = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结果：-11"><a href="#结果：-11" class="headerlink" title="结果："></a>结果：</h3><ol><li>singletonObjects 一级缓存：缓存某个beanName对应的经过了完整生命周期的bean</li><li>earlySingletonObjects 二级缓存：缓存提前拿原始对象进行了AOP之后得到的代理对象，原始对象还没有进行属性注入和后续的BeanPostProcessor等生命周期</li><li>singletonFactories 三级缓存：缓存的是一个ObjectFactory，主要用来生成原始对象进行了AOP之后得到的代理对象，在每个Bean的生成过程中，都会提前暴露一个工厂，这个工厂可能用到，也可能用不到，如果没有出现循环依赖那么这个工厂无用，bean按照自己的生命周期执行，执行完后直接放入singletonObjects中即可，如果出现了循环依赖 A 依赖 B，则 A 执行ObjectFactory提交得到一个AOP之后的代理对象(如果有AOP的话，如果无需AOP，则直接得到一个原始对象)。</li></ol><p><img src="https://blog-1314261683.cos.ap-chongqing.myqcloud.com/image/step16.png" alt="step16"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流体系</title>
      <link href="/posts/6834eed8.html"/>
      <url>/posts/6834eed8.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>得益于Lambda所带来的函数式编程</li><li>用于简化集合和数组操作的API</li></ul><h2 id="Stream流式思想的核心"><a href="#Stream流式思想的核心" class="headerlink" title="Stream流式思想的核心"></a>Stream流式思想的核心</h2><ol><li>得到集合或者数组的Stream流(相当于一根传送带)</li><li>把元素放上去</li><li>利用Stream流简化的API方便的操作元素</li></ol><p><strong>Tips:Stream只能使用一次</strong></p><h2 id="Stream流的三类方法"><a href="#Stream流的三类方法" class="headerlink" title="Stream流的三类方法"></a>Stream流的三类方法</h2><ul><li>获取Stream流<ul><li>创建一条流水线，并把数据放到流水线上准备进行操作</li></ul></li><li>中间方法<ul><li>流水线上的操作。一次操作完毕之后，还可以进行其他操作(支持链式编程)</li></ul></li><li>终结方法<ul><li>一个Stream流只能有一个终结方法，是流水线上的最后一个操作</li><li>count()  forEach() 都是终结方法</li></ul></li></ul><h3 id="集合获取Stream流"><a href="#集合获取Stream流" class="headerlink" title="集合获取Stream流"></a>集合获取Stream流</h3><p>使用Collection接口中的默认方法stream()生成流</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>default Stream<E\> stream()</td><td>获取当前集合对象的Stream流</td></tr></tbody></table></div><h3 id="数组获取获取Stream流"><a href="#数组获取获取Stream流" class="headerlink" title="数组获取获取Stream流"></a>数组获取获取Stream流</h3><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>public static <T\> Stream<T\> stream(T[]  array )</td><td>获取当前数组的Stream流</td></tr><tr><td>public static <T\> Stream<T\> of(T…  values )</td><td>获取当前数组/可变数据的Stream流</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.fault.SOAPFaultBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Collection 集合获取Stream流</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; ListStream = list.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Map 集合获取Stream流</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 键流</span></span><br><span class="line">        Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 值流</span></span><br><span class="line">        Stream&lt;Integer&gt; valueStream = map.values().stream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 键值对流 map 转 set</span></span><br><span class="line">        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; keyAndValueStream= map.entrySet().stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Array 数组获取Stream流</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String[] names = &#123;<span class="string">&quot;JOJO&quot;</span>,<span class="string">&quot;Ray&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; ArrayStream = Arrays.stream(names);</span><br><span class="line">        Stream&lt;String&gt; ArrayStream2 = Stream.of(names);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Stream流的常用API"><a href="#Stream流的常用API" class="headerlink" title="Stream流的常用API"></a>Stream流的常用API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.soap.SOAPBinding;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(names,<span class="string">&quot;张三丰&quot;</span>,<span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;周芷若&quot;</span>,<span class="string">&quot;赵敏&quot;</span>,<span class="string">&quot;张靖&quot;</span>);</span><br><span class="line">        System.out.println(names);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以张开头的名字</span></span><br><span class="line">        List&lt;String&gt; ZhangList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name:names) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.startsWith(<span class="string">&quot;张&quot;</span>))&#123;</span><br><span class="line">                ZhangList.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ZhangList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以张开头三个字的名字</span></span><br><span class="line">        List&lt;String&gt; ZhangThreeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name:ZhangList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.length() == <span class="number">3</span>)&#123;</span><br><span class="line">                ZhangThreeList.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ZhangThreeList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Stream流实现</span></span><br><span class="line">        names.stream()</span><br><span class="line">                .filter(name -&gt; name.startsWith(<span class="string">&quot;张&quot;</span>))</span><br><span class="line">                .filter(name -&gt; name.length() == <span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 截取前2个张姓名字 limit</span></span><br><span class="line">        <span class="comment">// names.stream().filter(name -&gt; name.startsWith(&quot;张&quot;)).limit(2).forEach(name -&gt; System.out.println(name));</span></span><br><span class="line">        names.stream().filter(name -&gt; name.startsWith(<span class="string">&quot;张&quot;</span>)).limit(<span class="number">2</span>).forEach(System.out::println);<span class="comment">// 方法引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳过前2个张姓名字 skip</span></span><br><span class="line">        <span class="comment">// names.stream().filter(name -&gt; name.startsWith(&quot;张&quot;)).limit(2).forEach(name -&gt; System.out.println(name));</span></span><br><span class="line">        names.stream().filter(name -&gt; name.startsWith(<span class="string">&quot;张&quot;</span>)).skip(<span class="number">2</span>).forEach(System.out::println);<span class="comment">// 方法引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 三个字名字的个数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> names.stream().filter(name -&gt; name.length() == <span class="number">3</span>).count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// map 加工方法</span></span><br><span class="line">        names.stream().map(name-&gt;<span class="string">&quot;smart&quot;</span>+name).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// map 加工成对象</span></span><br><span class="line">        <span class="comment">//names.stream().map(name -&gt; new User(name)).forEach(System.out::println);</span></span><br><span class="line">        names.stream().map(User::<span class="keyword">new</span>).forEach(user -&gt; System.out.println(user.getName())); <span class="comment">// 构造器引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并流</span></span><br><span class="line">        Stream&lt;String&gt; stringStream = names.stream().filter(name -&gt; name.startsWith(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">        Stream&lt;String&gt; stringStream1 = Stream.of(<span class="string">&quot;Java1&quot;</span>, <span class="string">&quot;Java2&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; concat = Stream.concat(stringStream, stringStream1);</span><br><span class="line">        concat.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream流收集"><a href="#Stream流收集" class="headerlink" title="Stream流收集"></a>Stream流收集</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;郭靖&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张流&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          Stream流 收集到 List 集合</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Stream&lt;String&gt; zhangStream = list.stream().filter(name -&gt; name.startsWith(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">        List&lt;String&gt; zhangList = zhangStream.collect(Collectors.toList());</span><br><span class="line">        System.out.println(zhangList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          Stream流 收集到 Set 集合</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Set&lt;String&gt; set = list.stream().filter(name -&gt; name.length() == <span class="number">3</span>).collect(Collectors.toSet());</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Stream流 收集到 Array 数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 接受全部类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//Object[] array = list.stream().filter(name -&gt; name.startsWith(&quot;张&quot;)).toArray();</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 单种类型原始写法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        String[] array = list.stream().filter(name -&gt; name.startsWith(&quot;张&quot;)).toArray(new IntFunction&lt;String[]&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public String[] apply(int value) &#123;</span></span><br><span class="line"><span class="comment">//                return new String[value];</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 单种类型 lambda 简化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//String[] array = list.stream().filter(name -&gt; name.startsWith(&quot;张&quot;)).toArray(length -&gt; new String[length]);</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 单种类型 方法引用 简化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String[] array = list.stream().filter(name -&gt; name.startsWith(<span class="string">&quot;张&quot;</span>)).toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
